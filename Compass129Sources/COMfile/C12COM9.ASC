	;Compass #1.2.09 - COMfile
	;logo-routine eventueel nog verbeteren
	;gebaseerd op v1.1, doch volledig herschreven en herwerkt
	;25-10-98 JDS
	;Copyright 1998 by Compjoetania The Next Generation

	.label	13

bdos	equ	#0005
headln	equ	128	;lengte van de header (DATfile)
headlncom	equ	110	;lengte van de header (COMfile)

kbuf	equ	#f41f
temp_page3	equ	kbuf
savepage	equ	temp_page3+0
RAM_count	equ	temp_page3+1
queuebc	equ	#f9f5

ctngcode	equ	#ff79

	ORG	#0100

	jp	skipid
	db	29,29,"   ",13,10
	db	"Compass #1.2.09 COMfile",13,10
	db	"(C)1998 Compjoetania The Next Generation",13,10,10
	db	"DO NOT DISTRIBUTE!",13,10,26
	ds	#0100+headlncom-2-$,0	;reserve bytes
	db	#09,#12	;IDbyte subnr (bit7=beta),mainnr
skipid	LD	HL,queuebc+4
	LD	DE,compass_ID
	LD	B,#08
J0109:	LD	A,(DE)
	INC	DE
	CP	(HL)
	INC	HL
	JR	NZ,J0119
	DJNZ	J0109
	LD	DE,txt_inmem
	LD	C,#09
	JP	bdos
J0119	ei
	halt
	ld	a,(#fbeb)
	rrca
	jr	c,noshift
	ld	a,(i_limit)
	ld	(nr_max),a
	xor	a	;hierdoor wordt er een search mem gedaan
	ld	(i_skipsrcmem),a	;ipv een installing memory
noshift	LD	A,(#FCC1)
	LD	HL,#002D
	CALL	#000C
	OR	A
	LD	DE,txt_msx1
	LD	C,#09
	JP	Z,bdos
	ld	hl,ctngcode
	res	0,(hl)
	LD	A,(i_new)	;logo tonen?
	OR	A
	JR	Z,J0142	;ja,program is new
	LD	A,(i_logo)
	OR	A
	JR	Z,J0145	;or logo is on
J0142	call	logoprog

J0145:	DI
	XOR	A
	OUT	(#99),A
	NOP
	LD	A,#90
	OUT	(#99),A
	LD	HL,startpalet
	LD	BC,#209A
	OTIR
	ld	a,15
	LD	(#F3E9),A
	xor	a
	ld	(#f3ea),a
	ld	(#f3eb),a
	LD	IX,#0062	;stel kleuren in
	LD	IY,(#FCC0)
	CALL	#001C
	ld	a,80
	ld	(#f3ae),a
	XOR	A	;screen 0
	LD	IX,#005F
	LD	IY,(#FCC0)
	CALL	#001C
;mainprogram
	LD	DE,txt_intro
	CALL	print
	CALL	fill_dosnr
	CALL	fill_stat_mem
	LD	DE,txt_ROMRAM
	CALL	print
	CALL	chk_ROMRAM
	ld	de,txt_done
	CALL	print
	ld	hl,(RAM_count)
	call	print_memory
	ld	de,txt_manage
	call	print
	ld	a,(stat_mem)
	add	a,a
	ld	e,a
	ld	d,0
	ld	hl,tab_manage
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	call	print
	ld	a,(i_skipsrcmem)	;gesavede versie zonder shiftopstart?
	or	a
	jr	nz,meminst	;ja, direct installeren dan
	ld	de,txt_limit	;niet gesavede versie of met shift
	call	print
	ld	hl,(nr_max)
	call	print_memory
memsrc	ld	de,txt_search
	call	print
	call	src_mem
	jr	nc,okidoki
	ld	hl,ctngcode
	set	0,(hl)
	ld	de,txt_nofree
	jp	print
meminst	ld	de,txt_inst
	call	print
	call	inst_mem
	jr	nc,okidoki
	ld	de,txt_notfree
	call	print
	ld	a,#ae	;poke nieuwe opcode: res 5,(ix+0)
	ld	(m_res6),a	;dit dient om de free-routine weer
	xor	a	;gewoon te maken (was veranderd)
	ld	(i_skipsrcmem),a	;default memuse in de datfile
	jr	memsrc
okidoki	ld	de,txt_okused
	call	print
	call	get_used

	ld	de,txt_load
	call	print
	LD	A,(#F343)	;page2 dosslot
	LD	C,A	;in C:slotcode
	ld	a,(tab_TPA+2)
	LD	B,a	;in B:bloknr
	CALL	ld_blokb_2c
	LD	A,(stat_dos)
	CP	#02
open_dos1	LD	DE,fcb_compass	;open file (dos1) klaarzetten
	LD	C,#0F
	JR	C,go_load
	LD	HL,env_program
	LD	DE,#8000
	LD	BC,#FF6B
	CALL	bdos	;get env-item PROGRAM
	OR	A
	scf
	JR	NZ,open_dos1
	LD	HL,env_compass	;vul COMPASS met de inhoud van
	LD	DE,#8000	;het PROGRAMenv-item
	LD	C,#6C
	CALL	bdos
	or	a
	jp	nz,env_error
	LD	DE,#8000	;filehandle aanmaken voor dat-file
	LD	BC,#005B
	CALL	bdos
	EX	DE,HL
	LD	A,#2E	;DE wijzend op 'c' van compass
	LD	(fcb_compass+8),A
	LD	HL,fcb_compass+1
	LD	BC,12	;kopieer ook terminating zero
	LDIR		;vervang filename door de dat-versie
	LD	DE,#8000	;de handle is nu klaar
	XOR	A
	LD	C,#43	;open filehandle (dos2)
go_load	CALL	bdos
	OR	A
	JP	NZ,loaderror
	LD	A,B	;bewaar new handlenr (dos2)
	LD	(new_handle),A
	ld	de,0
	ld	hl,headln
	ld	a,(stat_dos)
	cp	2
	jr	c,schuifop
	xor	a
	ld	c,#4a
	call	bdos

schuifop	LD	(fcb_compass+33),HL
	LD	(fcb_compass+35),DE
	ld	l,1	;size op 1byte
	LD	(fcb_compass+14),HL

	LD	DE,#8140
	CALL	set_DTA
	LD	HL,#3EC0
	CALL	load_data
	LD	BC,(compass_1)
	CALL	slot_en_move
	LD	HL,#0000	;vul deel 1 aan met de dosstart
	LD	DE,#4000
	LD	BC,#0140
	LDIR

	LD	DE,#8000
	CALL	set_DTA

	LD	HL,#4000
	CALL	load_data
	LD	BC,(compass_0)
	CALL	slot_en_move

	LD	HL,#4000
	CALL	load_data
	LD	BC,(compass_2)
	CALL	slot_en_move

	LD	HL,#4000
	CALL	load_data
	LD	BC,(compass_3)
	CALL	slot_en_move

	LD	A,(stat_dos)	;file sluiten
	CP	#02
	LD	DE,fcb_compass	;file sluiten (dos1) klaarzetten
	LD	C,16
	JR	C,go_close
	LD	A,(new_handle)
	LD	B,A
	LD	C,#45
go_close	call	bdos
	ld	de,txt_lddone
	call	print
	ei
	halt
	ld	a,(#fbec)
	and	#10
	jr	nz,go_launch
stop_wacht1	ld	a,(#fbec)
	and	#10
	jr	z,stop_wacht1
stop_wacht2	ld	a,(#fbec)
	and	#10
	jr	nz,stop_wacht2
go_launch	ld	de,txt_launch
	call	print

	LD	HL,inst	;instellingen
	LD	DE,kbuf
	LD	BC,inst_end-inst
	LDIR
	LD	HL,work_ROMRAM	;ROM/RAMtabel naar #c000
	LD	DE,#C000	;mem_tabel naar #c060
	LD	BC,#60+#c1+8+4	;compass-segments naar #c121
	LDIR		;tpasegmentnrs naar #c129

	LD	BC,(compass_1)	;schakel startsegment aan op page2
	CALL	ld_blokb_2c
	ld	de,(stat_dos)	;dosversie in E,statmem in D
	ld	hl,inst-#0100
	ld	bc,inst_end-inst
	JP	#8149

env_error	ld	de,txt_err_env
	jr	free_all
err_in_call	POP	HL	;terugsprong vernietigen
loaderror	LD	DE,txt_lderr
free_all	call	print
	ld	hl,ctngcode
	set	0,(hl)
	jp	m_freeall	;segmenten vrijgegeven

;************************************************einde main,begin routines
;vult doskernel nummer in
;1=DOS1 2=DOS2 of hoger ;)
fill_dosnr	LD	C,#6F
	CALL	bdos
	LD	A,B
	CP	2
	LD	A,1
	JR	C,J20F4
	INC	A
J20F4:	LD	(stat_dos),A
	RET

;vult memorystatus in
;0=DOS1,use own  1=DOS2 mapper support  2=Memman+DOS1 3=Memman+DOS2
fill_stat_mem	DI
	XOR	A
	LD	DE,#4D1E	;Memman Inichk
	CALL	#FFCA
	CP	#4D
	JR	NZ,no_memman
	ld	hl,-#0204	;test op versie 2.4
	add	hl,de
	jr	nc,old_memman
	ld	bc,#0400
	ld	de,tab_TPA
haal_TPA_Mm	push	bc
	push	de
	ld	b,c
	ld	de,#4d21	;get tpa
	call	#ffca
	pop	de
	pop	bc
	ld	a,h
	ld	(de),a
	inc	de
	inc	c
	djnz	haal_TPA_Mm
use_memman	ld	a,(stat_dos)
	dec	a
	ld	a,2
	jr	z,J2125
	inc	a
	jr	J2125
old_memman	ld	de,txt_old
	call	print
	jr	use_memman
no_memman	LD	HL,#FB20
	BIT	0,(HL)
	LD	A,#00
	JR	Z,J2125
	XOR	A	;extra controle op aanwezigheid dos2map.
	LD	DE,#0402
	LD	HL,#0000
	CALL	#FFCA
	LD	A,H
	OR	L
	JR	Z,J2125
	LD	A,B
	LD	(primmap_slot),A
	LD	(jp_all_seg),HL	;1e entry ALL_SEG 
	INC	HL
	INC	HL
	INC	HL
	LD	(jp_fre_seg),HL	;FRE_SEG 
	ld	hl,#f2c7
	ld	de,tab_TPA
	ld	bc,4
	ldir
	LD	A,#01
J2125:	LD	(stat_mem),A
	RET

chk_ROMRAM	LD	A,(#F341)	;chk_ROMRAM ook beschikbaar in page 2
	LD	H,#80	;(gebruikt bij het checken van page 0)
	CALL	#0024
	LD	A,(tab_TPA)
	OUT	(#FE),A
	LD	IX,work_ROMRAM
	LD	B,3	;doe voor 3 pages: 0,1,2
	ld	hl,0	;beginnen met page 0,ramcount op nul
	ld	(savepage),hl	;bewaar in page 3
	ld	(RAM_count),hl

loop_page	PUSH	BC
	LD	DE,#FCC1
	LD	C,#80	;voorlopige slotcode
	LD	B,4
loop_slot	PUSH	BC
	PUSH	DE
	LD	A,(DE)
	AND	#80
	ld	a,(savepage)
	JR	NZ,expanded
	RES	7,C
	CALL	chk_notexp
	LD	DE,#0008	;next prim.slot (en automatisch
	ADD	IX,DE	;IX eventueel naar next page)
	JR	J21BB
expanded	CALL	chk_exp
J21BB:	POP	DE	;volgend primary slot
	POP	BC
	INC	DE
	INC	C
	DJNZ	loop_slot
	POP	BC
	LD	HL,savepage	;volgende pagina
	INC	(HL)
	DJNZ	loop_page
	LD	A,(#F343)	;herstel en ret from chk_ROMRAM
	LD	H,#80	;merk op dat de juiste mapperpage
	CALL	#0024	;nog niet is ingesteld voor page 2
	LD	A,(#F342)	;evenzo voor page 1
	LD	H,#40
	JP	#0024

chk_exp	LD	HL,get_memtype
	LD	(cl_adres),HL
	OR	A
	JR	NZ,go2_2
	LD	de,#8000
	ADD	HL,DE
	LD	(cl_adres),HL
	ADD	IX,DE
	JP	#8000+go2_2
go2_2	LD	B,4	;doe voor ieder subslot
J21F5:	PUSH	BC
	db	#cd	;call
cl_adres	dw	0
	INC	IX	;next subslot
	INC	IX
	POP	BC
	INC	C	;pas de slotcode aan
	INC	C
	INC	C
	INC	C
	DJNZ	J21F5
	LD	A,(savepage)
	OR	A
	RET	NZ
fix_page0	LD	A,(#F341)	;herstel slotinstelling page 0
	CALL	#8000+set_slot_p0
	LD	A,(#8000+tab_TPA)	;en ook page
	OUT	(#FC),A
	ld	de,#8000	;merk op: -#8000 =#8000
	add	ix,de	;#8000 AFTREKKEN van IX
	RET

chk_notexp	OR	A
	JR	NZ,get_memtype
	JP	#8000+go2_1
go2_1	LD	DE,#8000
	ADD	IX,DE
	CALL	#8000+get_memtype
	JR	fix_page0

get_memtype	LD	A,(IX+#00)	;werd er hier reeds een mapper
	OR	A	;gemeld?
	RET	NZ	;ja, niet testen dan
	LD	A,(savepage)
	OR	A
	JR	Z,chk_0
	DEC	A
	JR	Z,chk_1
	LD	HL,#8000
	JR	J225B
chk_0	LD	A,C
	CALL	#8000+set_slot_p0
	ld	hl,0
	JR	Ram_of_Rom
chk_1	LD	HL,#4000
J225B:	PUSH	HL
	LD	A,C
	CALL	#0024
	POP	HL
;in: IX(pointer naar 2bytes),HL(adres in de page),pagenr op savepage
Ram_of_Rom	LD	A,(HL)	;test op Ram
	ld	b,a
	INC	(HL)
	inc	a
	CP	(HL)
	LD	(HL),b
	JR	NZ,no_ram
	LD	(IX+#00),#02
	ld	a,(savepage)
	add	a,#fc
	ld	c,a
	LD	B,#00
J2292:	OUT	(C),B	;zet op ieder ramblok byte hl op 0
	LD	A,(HL)	;volgorde: 0,255,254,253,...
	LD	(HL),0
	PUSH	AF
	DJNZ	J2292
	LD	B,0
	LD	D,B
J229D:	OUT	(C),D
	LD	A,(HL)
	OR	A
	JR	NZ,J22A7	;ramblok 1 voor 2e keer geschakeld?
	LD	(HL),D
	INC	D
	DJNZ	J229D
J22A7:	dec	d	;trek er dus 2 van af
	dec	d
	LD	(IX+#01),D	;bewaar maxnr voor mapperram
	jr	z,vast_ram	;bij vast ram is maxnr=0
	LD	(IX+#20),2	;zet ramcode voor page 1en2
	LD	(IX+#40),2
	LD	(IX+#21),D
	LD	(IX+#41),D
	push	hl
	ld	hl,(RAM_count)
	ld	e,d
	ld	d,0
	add	hl,de
	inc	hl
	ld	(RAM_count),hl
	pop	hl
vast_ram	LD	B,#00
	LD	D,#01
J22B7:	OUT	(C),D
	POP	AF
	LD	(HL),A
	INC	D
	DJNZ	J22B7
	RET
no_ram	push	hl
	ld	de,#03ff
	ld	b,15
	ld	a,e
telop1	xor	(hl)
	add	hl,de
	djnz	telop1
	pop	hl
	ld	c,a
	or	a	;allemaal #ff
	ret	z
	ld	b,15
	ld	a,e
telop2	xor	(hl)
	add	hl,de
	djnz	telop2
	cp	c	;als de 2 checksums niet hetzelfde zijn,
	ret	nz	;dan was er een leesfout en dus geen rom
	inc	(ix)	;wel echt rom
	RET

;routine (in page 2) die slot A inschakelt op page 0
set_slot_p0	ld	b,a
	bit	7,a
	jr	nz,set_exp	;expanded slot?
	IN	A,(#A8)	;nee, gewoon zetten
	AND	#fc
	OR	B	;merk op:bit 2-6 zijn 0 voor notexp.slot
	OUT	(#A8),A
	RET
set_exp	rrca
	rrca
	ld	l,a
	and	#c0
	ld	h,a
	in	a,(#a8)
	ld	e,a	;oude a8-stand bewaren in e
	and	#3f
	or	h
	out	(#a8),a
	ld	a,l
	and	#03
	ld	l,a
	ld	a,(#ffff)
	cpl
	and	#fc
	or	l
	ld	(#ffff),a
	ld	d,a	;nieuwe ffff-stand in d
	ld	a,e
	out	(#a8),a	;page 3 herstellen
	ld	hl,#fcc5
	ld	a,b
	and	#03
	ld	c,a
	ld	b,0
	add	hl,bc
	ld	(hl),d
	ld	a,c
	jr	set_slot_p0

print_dec	ld	de,decstr+5
	ld	a,"$"
	ld	(de),a
	ld	c,-10
get_dig	xor	a
	ld	b,16
divide	adc	hl,hl
	adc	a,a
	add	a,c
	jr	c,oksub
	sub	c
oksub	djnz	divide
	adc	hl,hl
	add	a,"0"
	dec	de
	ld	(de),a
	ld	a,h
	or	l
	jr	nz,get_dig
	ld	hl,decstr
	ex	de,hl
	ld	c,5
	ldir
	ld	de,decstr
	ld	c,9
	jp	bdos

get_used	ld	ix,mem_tabel
	ld	de,#2e
	ld	a,4	;vier voor compassblocks
	ld	b,4	;doe voor de 4 buffers
sommeer	add	a,(ix)	;tel aantal sbuffersegmenten erbij
	add	a,(ix+#21)	;tel aantal databuffersegmenten erbij
	add	ix,de	;naar volgende buffer
	djnz	sommeer
	add	a,(ix)	;tel aantal labelbuffersegmenten erbij
	ld	l,a
	ld	h,0
;invoer: hl=aantal segmenten, print 'a segments (xxxxkB RAM)',13,10
print_memory	push	hl
	call	print_dec
	ld	de,txt_segments
	call	print
	pop	hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	call	print_dec
	ld	de,txt_kB_RAM
print	LD	C,#09
	JP	bdos

;***************************************************memoryroutines
;LET OP: er is een verschil tussen een tpa-segment en een tpaslot-segment
;tpa-segment is dus (in veel gevallen) ramblok 0,1,2 of 3 van de primary mapper
;tpaslot_segment kan elk ramblok van de primarymapper zijn

src_mem	CALL	m_tabel	;maak tabel aan met segmenten
	ret	c	;geen enkel tpaslotsegm gevonden
	call	m_count_free	;als je nu geen 4 segmenten hebt, moet je
	ld	hl,3	;er niet aan beginnen! De compassblocks
	call	m_vgl_HLDE	;mogen immers niet in tpa-segmenten
	jp	nc,m_freeall	;zitten, dus geen m_add_321 toepasbaar
	LD	DE,buffer
	LD	HL,compass_1	;vraag tpaslotsegm aan voor cblock 1
	CALL	m_src_dosram	;gaat altijd, we hadden er immers 1
	LD	DE,buffer	;de volgende 3 segmenten zijn steeds
	ld	hl,compass_0	;te vinden want we hadden vier segm.
	CALL	m_use_zet6_hl	;zoek voor compass blok 0
	inc	hl	;sla compassblok 1 over
	inc	hl
	CALL	m_use_zet6_hl	;zoek voor compassblok 2
	CALL	m_use_zet6_hl	;zoek voor compassblok 3

	CALL	m_count_free	;tel het aantal ongebruikte blokken
	LD	IX,buffer	;selecteer eerste labelblok
	LD	BC,#0109	;dit moet ook in het tpaslot zitten
	CALL	m_usepages
	jr	nc,m_okee
	call	m_add_321	;mislukt, voeg tpa-segs toe
	call	m_count_free	;nu moet het gaan
	ld	ix,buffer
	ld	bc,#0109
	call	m_usepages
	jp	c,m_freeall	;eigenlijk niet nodig

m_okee	call	m_count_free	;als je hier komt zijn er nog zeker 2
	ld	hl,1	;tpasegm over. Gebruik deze als je geen
	call	m_vgl_HLDE	;2 andere meer hebt voor sbuf1+data1
	call	nc,m_add_321

	LD	IX,buffer	;selecteer vervolgens 1 sourcebufblok
	LD	BC,#0101
	CALL	m_usepages	;gaat dus altijd

	LD	BC,#0105	;selecteer 1 datablok bij sbuf 1
	CALL	m_usepages	;gaat dus altijd

	LD	IY,m_priortab	;vul eventueel nog wat verder aan
J23BC:	LD	A,(IY+#00)
	INC	IY
	OR	A
	JR	Z,J23DE	;einde priortab; geen enkel goei
	CP	#FF	;configuratie meer gevonden
	JR	Z,J23D5	;check of er nog 2 zijn
	LD	B,A	;get aantal
	LD	C,(IY+#00)	;get type
	INC	IY
	CALL	m_usepages	;zet in use
	JR	C,J23DE	;blijkt onmogelijk, stop dan maar
	JR	J23BC	;okee
J23D5:	LD	A,D	;zijn er nog 2 segmenten over?
	OR	A
	JR	NZ,J23BC	;zo ja,probeer er nog te usen
	LD	A,E
	CP	#02
	JR	NC,J23BC
J23DE:	CALL	m_free	;free wat niet gebruikt werd
	XOR	A
	RET

m_tabel	ld	hl,(nr_max)
	LD	A,(stat_mem)	;zoek tot je zeker 2 segm in het tpaslot
	OR	A	;hebt en tot je minstens nr_max segm hebt
	JP	NZ,m_manage	;of zoek tot geheugen op is
	push	hl
	ld	ix,tempbuffer	;gebruik de hoogste 2 segmenten van de
	ld	a,(#f344)	;mainmapper als 2 tpaslot-segmenten
	ld	(ix),a	;bewaar 1e slotcode
	ld	b,a
	and	#03
	rlca
	rlca
	rlca
	ld	c,a	;c=primaryslot*8
	ld	a,b
	and	#0c
	rrca
	add	a,c
	ld	e,a
	ld	d,0
	ld	hl,work_ROMRAM+1
	add	hl,de
	ld	a,(hl)	;get maxblocknr primary mapper
	pop	hl
	dec	hl
	cp	4	;test of de mapper >64kB
	ret	c
	ld	(ix+1),a	;bewaar 1e segmnr
	jr	z,go_on	;2e tpasegment zou anders nr 3 zijn
	;                        ;dit moet nu nog niet toegevoegd worden
	ld	(ix+2),b	;bewaar 2e slot
	dec	a
	ld	(ix+3),a	;bewaar 2e segmnr
	dec	hl
go_on	ld	ix,buffer
	ld	de,work_ROMRAM+#41	;waarom voor page2?*******
	LD	IY,#FCC1	;-->'t is eigenlijk al 't zelfde
	LD	BC,#1000	;16=ga de 16 subslots af, C=def.slot
J256B:	PUSH	BC
	PUSH	DE
	BIT	7,(IY+#00)	;is het in een uitgebreid slot?
	JR	Z,in_not_exp
	SET	7,C	;pas de slotcode aan
in_not_exp	ld	a,(#f344)	;sla het tpa-slot over
	cp	c
	jr	z,volgend
	call	m_scanslot	;input: C=slotcode DE=adres met maxsegnr
	jr	c,found_genoeg
volgend	POP	DE
	POP	BC
	INC	DE
	INC	DE
	LD	A,C	;pas de slotcode aan
	AND	#0C
	CP	#0C	;was het een subslot 3?
	LD	A,C
	LD	C,#04	;neen, gewoon 1 subslot bijtellen
	JR	NZ,J25B2
	INC	IY	;ja, next primary slot IY
	LD	C,%11110101	;next prim slot,sec.slot op nul,bit7=0
J25B2:	ADD	A,C
	LD	C,A
	DJNZ	J256B
	call	m_add_temp	;voeg 2of1 eerder gevonden tpa tussen
	ld	a,(#f344)
	ld	c,a
	ld	de,tempbuffer+1	;adres waar maxpagenr staat
	ld	a,(de)	;hou rekening dat de hoogste nrs
	dec	a	;reeds de deur uit zijn
	dec	a	;zelfs al is er maar 1 weg, dan vallen
	ld	(de),a	;de segmenten toch in het tpagebied
	call	m_scanslot	;voeg de tpaslotsegs als laatste toe
	LD	(IX+#00),#00	;terminating nulslotcode
	or	a	;wis carry
	ret
found_genoeg	pop	de	;stack schoonmaken
	pop	bc
	call	m_add_temp	;add 2of1 eerder gevonden tpa
	LD	(IX+#00),#00	;terminating nulslotcode
	or	a	;wis carry
	ret

m_scanslot	LD	A,(DE)
	or	a	;mapperram hier?
	ret	Z	;nee, (rom of vast ram)
	LD	A,(#F344)	;zitten we in het DOSRAM?
	CP	C
	ld	a,(de)	;laadt maxpagenr op vooraleer DE
	ld	e,0	;wordt gebruikt
	ld	d,a
	ld	b,a
	JR	NZ,J2589	;nee, alles registreren
	inc	e	;e op 1
J2589	inc	b	;effectief aantal blokken
J258B	LD	A,H
	OR	L
	scf
	ret	Z	;we hebben er al genoeg (nr_max blokken!)
	bit	0,e	;zitten we in het tpa-slot?
	jr	z,m_do_reg	;nee, registreer dan direct
	ld	a,d
	push	hl
	call	m_chk_tpa	;is het een tpasegment?
	pop	hl
	jr	z,m_do_skip	;ja,niet registreren dan
m_do_reg	DEC	HL	;zoek 1 page minder
	LD	(IX+#00),C	;bewaar slotcode
	INC	IX
	LD	(IX+#00),D	;bewaar rambloknr
	INC	IX
m_do_skip	dec	d
	djnz	J258B
	or	a	;reset carry
	ret
m_chk_tpa	ld	hl,tab_TPA	;check for page 0
	cp	(hl)
	ret	z
	inc	hl	;check for page 1
	cp	(hl)
	ret	z
	inc	hl	;check for page 2
	cp	(hl)
	ret	z
	inc	hl	;check for page 3
	cp	(hl)
	ret

m_manage	ld	ix,tempbuffer
	call	m_alloc_tpa	;alloceer 2 tpaslotsegm. naar tempbuffer
	ret	c
	call	m_alloc_tpa
	;de eerste dient voor cblock1
	;de tweede mag ontbreken, deze dient voor de labelbuffer
	;als hij ontbreekt, wordt hij later in de maintpa-segm. gezet
	;Merk op: de laatste 2 bytes van tempbuffer zullen dan 0 zijn
	;hier wordt rekening mee gehouden bij m_add_temp
	ld	ix,buffer	;merkop:2 tpa gevonden,dan ix al goed
m_all_notpa	call	m_alloc_notpa
	JR	C,m_outofnottpa	;niet-tpa segmenten zijn op
	LD	A,H
	OR	L
	JR	NZ,m_all_notpa
	call	m_add_temp	;voeg de twee tpaslotsegs toe
	ld	(ix),0
	or	a	;wis carry
	ret
m_outofnottpa	call	m_add_temp	;voeg de twee tpaslotsegs in
m_all_tpa	call	m_alloc_tpa
	JR	C,m_outoftpa	;niet-tpa segmenten zijn op
	LD	A,H
	OR	L
	JR	NZ,m_all_tpa
m_outoftpa	ld	(ix),0
	or	a	;wis carry
	ret

m_add_temp	push	hl	;voeg de 1 of 2 segmenten in
	ld	hl,tempbuffer
	push	ix
	pop	de
	ldi
	ldi
	xor	a
	cp	(hl)
	jr	z,m_skip_2
	ldi		;voeg ook 2e in
	ldi
m_skip_2	push	de
	pop	ix
	pop	hl
	ret
m_alloc_tpa	ld	bc,#4300	;memman:prefereer tpa dos2:tpa only
	call	m_all_save
	ret	c	;abort, geen tpa meer
	ld	a,(#f344)	;controle op memman: was het wel een tpa
	cp	b	;dos geeft wel steeds tpa
	ret	z
m_free_it	inc	hl
	dec	ix
	ld	c,(ix)
	dec	ix
	ld	b,(ix)
	push	hl
	call	m_free_b_c
	pop	hl
	scf
	ret

m_alloc_notpa	ld	a,(stat_mem)
	cp	2
	jr	nc,m_alloc_mntpa	;iets moeilijker bij memman
	ld	c,#10	;dos2:zeker geen tpa
	jr	m_all_save	;=call m_all_save, ret
m_alloc_mntpa	ld	b,0
m_try_nottpa	push	bc
	ld	b,#03	;memman:fseg
	call	m_all_save
	jr	c,m_alles_op
	ld	a,(#f344)	;controle op memman: was het wel een
	cp	b	;niet-tpa?
	jr	nz,m_ja_eindelyk
	pop	bc
	djnz	m_try_nottpa
	di
	halt		;hier wordt er normaal nooit gekomen, bij memman kunnen
	;er nooit 256 tpasegm worden aangevraagd aangezien een mapper
	;maar 256 segm telt en 0 nooit vrijgegeven wordt.
m_ja_eindelyk	pop	bc	;haal b
	dec	ix
	push	ix	;(bewaar deze plek)
	dec	ix
	call	m_free_tpa
	pop	bc	;haal die plek waar het niettpa stond
	ld	a,(bc)	;haal segmentnr
	ld	e,a
	dec	bc
	ld	a,(bc)	;haal slotcode
	ld	(ix),a
	inc	ix
	ld	(ix),e
	inc	ix
	or	a	;wis carry
	ret
m_alles_op	pop	bc
	call	m_free_tpa
	scf
	ret
m_free_tpa	ld	a,b
	or	a
	ret	z
	push	bc
	call	m_free_it
	pop	bc
	inc	b
	jr	m_free_tpa

m_all_save	push	hl
	call	Mm_dos2_alloc
	pop	hl
	ret	c
	LD	(IX+#00),B	;bewaar slotcode
	INC	IX
	LD	(IX+#00),A	;bewaar rambloknr
	INC	IX
	dec	hl
	ret
Mm_dos2_alloc	LD	A,(stat_mem)
	DEC	A
	JR	NZ,m_Mm_alloc
	LD	A,(primmap_slot)	;enkel dos 2
	OR	C	;try to allocate segments
	LD	B,A
	LD	A,#01	;allocate systemsegmenten
	db	#c3	;Jump
jp_all_seg	dw	0
m_Mm_alloc	PUSH	IX
	LD	DE,#4D0A
	CALL	#FFCA
	POP	IX
	LD	A,H
	OR	L
	SCF		;hl=0000 =segmenten zijn op
	RET	Z
	LD	B,L	;Memmansegmentcode blijkt te bestaan uit
	LD	A,H	;H=mapperblok L=slotcode
	CCF
	RET

m_count_free	LD	HL,buffer
	LD	DE,#0000	;aantal slotcodes met bit6 laag=unused
J2608:	LD	A,(HL)
	OR	A
	RET	Z	;einde van de lijst
	BIT	6,(HL)
	JR	NZ,J2610
	INC	DE
J2610:	INC	HL
	INC	HL
	JR	J2608

m_vgl_HLDE	LD	A,H
	SUB	D
	RET	NZ
	LD	A,L
	SUB	E
	RET

m_freeall	ld	a,#b6	;poke nieuwe opcode: res 6,(ix+0)
	ld	(m_res6),a	;hierdoor worden ook de gebruikte
m_free	LD	A,(stat_mem)
	OR	A
	scf
	RET	Z	;enkel als er een memmanager is
	LD	IX,buffer-2
m_freenext	INC	IX
	INC	IX
	db	#DD,#CB,0	;res 5,(ix+0):dit doet dus niets
m_res6	db	#AE	;om ALLES te free-en: poke hier #B6
	LD	A,(IX+#00)	;dit is opcode voor res 6,(ix+0)
	OR	A
	scf
	RET	Z	;gedaan
	bit	4,a	;is het een tpasegment?
	jr	nz,m_freenext	;ja, niet vrijgeven dan
	BIT	6,A	;segmenten in use niet vrijgeven en ze
	JR	NZ,m_bit6seg	;onder memman de reserved status geven
	ld	b,a	;slotcode in b
	LD	c,(IX+#01)	;pagenr in c
	call	m_free_b_c
	jr	m_freenext

m_bit6seg	LD	A,(stat_mem)
	CP	#02	;memman?
	jr	c,m_freenext
	LD	L,(IX+#00)
	RES	6,L	;herstel de originele slotcode
	LD	H,(IX+#01)	;(zonder bit 6 hoog)
	LD	DE,#4D0B	;geef reserved status (memman only)
	PUSH	IX
	CALL	#FFCA
	pop	ix
	JR	m_freenext

m_free_b_c	LD	A,(stat_mem)
	CP	#02
	JR	nc,m_fre_Mm
	ld	a,c
	db	#c3	;jump: free onder dos2
jp_fre_seg	dw	0
m_fre_Mm	LD	L,B	;free onder memman
	LD	H,C
	LD	DE,#4D14
	PUSH	IX
	CALL	#FFCA
	POP	IX
	ret

J24AE:	INC	DE
	INC	DE
m_use_zet6_hl	LD	A,(DE)
	BIT	6,A	;already used?
	JR	NZ,J24AE
	and	#8f	;wis een eventueel tpa-bit
m_dosram_fnd	LD	(HL),A
	INC	HL
	ld	a,(de)	;haal origineel (met eventueel bit4 hoog)
	OR	#40	;zet bit 6
	LD	(DE),A
	INC	DE
	LD	A,(DE)
	INC	DE
	LD	(HL),A
	INC	HL
	XOR	A
	RET

m_src_dosram	LD	A,(#F344)
	LD	B,A
J249F:	LD	A,(DE)
	OR	A	;einde al bereikt?
	SCF
	RET	Z
	BIT	6,A	;al in special use?
	JR	NZ,J24AA
	and	#8f	;wis een eventueel tpa-bit
	CP	B
	JR	Z,m_dosram_fnd
J24AA:	INC	DE
	INC	DE
	JR	J249F

m_add_321	LD	A,(#F344)
	LD	C,A
	push	hl
	ld	hl,tab_TPA
	LD	B,#03
J2462:	PUSH	BC
	LD	A,(hl)
	inc	hl
	LD	B,C
	CALL	m_src_b_a	;zit dit segment al in onze tabel?
	JR	NC,J2478	;dosrampage werd gevonden
	set	4,b	;bit zetten als teken van tpa-segment
	LD	(IX+#00),B	;niet gevonden, voeg ze zelf toe
	INC	IX
	LD	(IX+#00),C
	INC	IX
	LD	(IX+#00),#00
J2478:	POP	BC
	DJNZ	J2462
	pop	hl
	RET

m_src_b_a	LD	C,A	;zoek naar een page in slot B, nr A
	LD	IX,buffer-2	;deze page mag eventueel gebruikt zijn
	;uit: Not Carry: ok, IX
	;     Carry set: not found, ix op de nulbyte
J2485	INC	IX
	INC	IX
	LD	A,(IX+#00)
	OR	A
	SCF
	RET	Z
	AND	#8f	;laat bit 6 en 4 niet doorkomen
	CP	B
	JR	NZ,J2485
	LD	A,(IX+#01)
	CP	C
	JR	NZ,J2485
	RET

m_usepages	PUSH	DE
	LD	HL,mem_tabel
	LD	A,C
	CP	#05	;sourcebuffertype? (1-4)
	JR	NC,m_no_sbuf	;nee
	LD	DE,#002E
J23F7:	DEC	a	;zet hl goed afhankelijk van sbufnr
	JR	Z,m_setuse
	ADD	HL,DE
	JR	J23F7
m_no_sbuf	CP	#09	;databloktype?
	JR	Z,m_datablok
	LD	DE,#0021
	ADD	HL,DE
	LD	DE,#002E
	SUB	#04
J240A:	DEC	A
	JR	Z,m_setuse
	ADD	HL,DE
	JR	J240A
m_datablok	LD	DE,#00B8
	ADD	HL,DE

m_setuse	POP	DE	;set B vrije pages op entry hl in use
	DEC	IX	;DE(vrije pages) wordt verlaagd
	DEC	IX	;bit 6 wordt op hoog gezet
m_nxtblok	INC	IX
	INC	IX
	LD	A,(IX+#00)
	OR	A
	SCF
	RET	Z
	BIT	6,A	;al gebruikt voor compass?
	JR	NZ,m_nxtblok
	LD	A,C
	CP	#09
	JR	NZ,m_register	;registreren, when not for labelsegment
	LD	A,(HL)
	OR	A	;in geval van een labelsegment mag je ook
	JR	NZ,m_register	;registreren als het het eerste niet is
	ld	a,(ix)
	and	#8f	;eventueel bit 4 resetten (tpa-seg)
	exx		;bewaar c
	ld	c,a	;een eerste labelsegm. moet in het
	ld	a,(#f344)	;tpaslot zitten
	cp	c
	exx		;herstel c
	jr	nz,m_nxtblok
m_register	PUSH	BC
	PUSH	DE
	PUSH	HL
	ld	e,(hl)
	INC	(HL)
	INC	HL
	RLC	E
	LD	D,#00
	ADD	HL,DE
	LD	A,(IX+#00)
	SET	6,(IX+#00)
	and	#8f	;wis eventueel tpa-bit
	LD	(HL),A
	INC	HL
	LD	A,(IX+#01)
	LD	(HL),A
	POP	HL
	POP	DE
	DEC	DE
	POP	BC
	DJNZ	m_nxtblok
	OR	A	;succes
	RET

inst_mem	ld	a,(i_cblocks+2)	;controle of het tpaslot hetzelfde is
	ld	b,a
	ld	a,(#f344)
	cp	b
	scf
	ret	nz
	CALL	m_tabel
	ret	c	;geen 2 tpa-segs gevonden
	CALL	m_add_321

	LD	B,#04	;installeer 4 sbuffers
	LD	IY,i_mem_sbuf
	LD	DE,#002E
	CALL	m_chk_alloc
	JP	C,m_freeall

	LD	B,#04	;installeer 4 databuffers
	LD	IY,i_mem_sbuf+#21
	LD	DE,#002E
	CALL	m_chk_alloc
	JP	C,m_freeall

	LD	B,#01	;installeer 1 labelbuffer
	LD	IY,i_mem_sbuf+#B8
	CALL	m_chk_alloc
	JP	C,m_freeall

	CALL	C26B4	;installeer 4 compassblocks
	JP	C,m_freeall	;***gemakkelijk te maken zoals vorige**

	LD	HL,i_mem_sbuf
	LD	DE,mem_tabel
	LD	BC,#C1
	LDIR
	LD	HL,i_cblocks
	LD	DE,compass_0
	LD	BC,8
	LDIR
	call	m_free
	XOR	A
	RET

C26B4:	LD	B,#01
	PUSH	BC
	LD	B,#04
	LD	IY,i_cblocks-1
	JR	J26C3

m_chk_alloc	PUSH	BC
	LD	B,(IY+#00)
J26C3:	PUSH	IY
	INC	IY
	PUSH	DE
	LD	A,B
	OR	A
	JR	Z,J26E9	;alle segm. op deze entry afgewerkt
J26CC:	PUSH	BC
	LD	B,(IY+#00)
	INC	IY
	LD	A,(IY+#00)
	INC	IY
	CALL	m_src_b_a
	POP	BC
	JR	C,J26F3	;segment niet gevonden
	SET	6,(IX+#00)
	DJNZ	J26CC
J26E9:	POP	DE
	POP	IY
	ADD	IY,DE
	POP	BC
	DJNZ	m_chk_alloc
	XOR	A
	RET
J26F3:	POP	DE
	POP	IY
	POP	BC
	SCF
	RET

;******************************************einde memroutines
ld_blokb_2c	di
	ld	a,b
	OUT	(#FE),A
	LD	A,(stat_dos)
	CP	#02
	jr	c,skipmap2
	LD	A,B
	LD	(#F2C9),A
skipmap2	LD	A,C
	LD	H,#80
	CALL	#0024
	RET

set_DTA	LD	(curr_DTA),DE
	LD	C,#1A
	JP	bdos

load_data	LD	A,(stat_dos)
	CP	#02
	LD	DE,fcb_compass	;load in dos1 klaarzetten
	LD	C,#27
	JR	C,eindload
	LD	DE,(curr_DTA)	;load in dos2
	LD	A,(new_handle)
	LD	B,A
	LD	C,#48
eindload	CALL	bdos
	OR	A
	ret	z
	JP	err_in_call

slot_en_move	di
	LD	a,b
	OUT	(#FD),A
	LD	A,(stat_dos)
	CP	#02
	jr	c,skipmap1
	LD	A,B
	LD	(#F2C8),A
skipmap1	LD	A,C
	LD	H,#40
	CALL	#0024
	LD	HL,#8000
	LD	D,#40
	ld	e,l
	ld	b,d
	ld	c,e
	LDIR
	RET

;*******************************************************datagebied
compass_ID	db	"COMPASS",0
txt_inmem	db	"Compass already in memory !",13,10,"$"
txt_msx1	db	"Minimal MSX 2 required !",13,10,"$"
startpalet	db	#00,#00,#00,#00,#77,#07,#04,#00
	db	#17,#01,#27,#03,#51,#01,#27,#06
	db	#71,#01,#73,#03,#61,#06,#63,#06
	db	#11,#04,#65,#02,#55,#05,#77,#07
txt_intro	db	"Compass #1.2.09 (C)1998 Compjoetania The Next Generation"
	db	13,10,10,"$"
txt_old	db	7,"Notice: You are using a version of Memman older "
	db	"than version 2.40 .",13,10
	db	"TPA segments will be assumed to have numbers 3,2,1 "
	db	"and 0.",13,10,10,"$"
txt_ROMRAM	db	"Locating ROM/RAM: $"
txt_done	db	"done, found $"
txt_segments	db	" segments ($"
txt_kB_RAM	db	"kB RAM)",13,10,"$"
txt_manage	db	"Memorymanagement: $"
tab_manage	dw	txt_none
	dw	txt_DOS2
	dw	txt_Memman1
	dw	txt_Memman2
txt_none	db	"none",13,10,10,"$"
txt_DOS2	db	"DOS2 mapper support",13,10,10,"$"
txt_Memman1	db	"Memman (DOS1 environment)",13,10,10,"$"
txt_Memman2	db	"Memman (DOS2 environment)",13,10,10,"$"
txt_limit	db	"Memory allocation limited to $"
txt_inst	db	"Installing saved memory: $"
txt_notfree	db	"Not free or different memory configuration !",13,10,"$"
txt_okused	db	"Ok, used $"
txt_search	db	"Searching free memory: $"
txt_nofree	db	"Insufficient free memory !",13,10,"$"
txt_load	db	"Loading Compass: $"
txt_err_env	db	"aborted",13,10,10,"Not enough memory to create the "
	db	"COMPASS environment item !",13,10,"$"
txt_lderr	db	"Load error !",13,10,10,"$"
txt_lddone	db	"done",13,10,10,"All engines ready.",13,10,"$"
txt_launch	db	"Launching Compass...",13,10,"$"

nr_max	dw	14*256	;default: zoek zoveel mogelijk
stat_dos	db	0
stat_mem	db	0
primmap_slot	db	0
work_ROMRAM	ds	#60,0	;hier komt de ROMRAMslottabel, moet 0!
mem_tabel	ds	#c1,0
compass_0	dw	0
compass_1	dw	0
compass_2	dw	0
compass_3	dw	0
tab_TPA	db	3,2,1,0	;default TPAsegments for page 0,1,2 en 3
decstr	ds	6,0
env_program	db	"PROGRAM",0
env_compass	db	"COMPASS",0
fcb_compass	db	0,"COMPASS DAT"
	ds	25,0
new_handle	db	0
curr_DTA	dw	0
m_priortab	db	4,1,1,5,255,1,2,1,6,4,1,1,5,1
	db	9,4,2,1,6,3,1,1,5,1,9,255,1,3,1,7
	db	4,2,1,6,4,3,1,7,3,2,1,6,4,3,1,7
	db	255,1,4,1,8,3,3,1,7,4,4,1,8,4,4,1
	db	8,3,4,1,8,0

inst	db	0	;0=nog een maagdelijk programma
	;                        -->dus opstartlogo tonen+src_mem
	db	0	;sla srcmem niet over
i_new	equ	inst+#00	;splinternieuwe compass 0=ja
i_skipsrcmem	equ	inst+#01	;moet de searchmem overgeslagen w?0=nee
i_mem_sbuf	equ	inst+#02	;sbuf,datbuf,labelbuf config
i_cblocks	equ	inst+#c3	;compassblocks
i_logo	equ	inst+#eb	;logo tonen 1=ja
i_limit	equ	inst+#11b	;max.aantal te alloceren blokken (5-96)
	ds	(i_limit)-$,0	;gebied voor allerlei instellingen
	db	9	;max te installeren blokken in limitmode
inst_end

tempbuffer	ds	4,0
buffer	;buffer: overschrijft logoprog

logoprog	di
	XOR	A
	LD	(#F3E9),A
	LD	(#F3EA),A
	LD	(#F3EB),A

	ld	a,5
	ld	ix,#005f
	ld	iy,(#fcc0)
	call	#001c

	ld	a,(#f3e0)	;beeld uit
	and	#bf
	out	(#99),a
	ld	a,128+1
	out	(#99),a

	LD	A,(#ffe7)
	or	32
	out	(#99),a
	ld	a,128+8
	out	(#99),a

	ld	a,36
	out	(#99),a
	ld	a,128+17
	out	(#99),a

	ld	a,2
	out	(#99),a
	ld	a,128+15
	out	(#99),a

	ld	hl,vdphmmc
	ld	bc,#0b9b
	otir
	ld	hl,figdata+1
	ld	a,44+128
	out	(#99),a
	ld	a,128+17
	out	(#99),a

transfig	in	a,(#99)
	rrca
	jr	nc,_transend
	bit	6,a
	jr	z,transfig
	ld	a,(hl)
	out	(#9b),a
	INC	HL
	jr	transfig
_transend
	xor	a
	out	(#99),a
	ld	a,128+16
	out	(#99),a

	ld	hl,paletfig
	ld	bc,#209a
	otir


	ld	a,(#f3e0)	;beeld aan
	or	#40
	out	(#99),a
	ld	a,128+1
	out	(#99),a

	xor	a
	out	(#99),a
	ld	a,15+128
	out	(#99),a
	nop
	nop
	nop
	ei
	ld	b,0
wachtenmaar	halt
	djnz	wachtenmaar
	di

	ld	a,36
	out	(#99),a
	ld	a,128+17
	out	(#99),a
	ld	a,2
	out	(#99),a
	ld	a,128+15
	out	(#99),a
WVDP	NOP
	NOP
	IN	A,(#99)
	RRCA
	JR	C,WVDP

	ld	hl,vdpclean
	ld	bc,#0b9b
	otir
WVDP2	NOP
	NOP
	IN	A,(#99)
	RRCA
	JR	C,WVDP2

	ld	a,0
	out	(#99),a
	ld	a,128+15
	out	(#99),a

	LD	A,(#ffe7)
	out	(#99),a
	ld	a,128+8
	out	(#99),a

	ret

vdphmmc	db	10,0,45,0,238,0,101,0
	db	0,0,#f0	;eerste2pixels nul!!
vdpclean	db	0,0,0,0,0,1,212,0,#00,0,#c0

paletfig

figdata	equ	paletfig+32
