WRVDP	MACRO	@WAARDE,@POORT
	LD	A,@WAARDE
	OUT	(#99),A
	LD	A,128+@POORT
	OUT	(#99),A
	ENDM

chkvdp2	macro
chkvdp2@sym
	in	a,(#99)
	rrca
	jp	c,chkvdp2@sym
	endm

DEBUG	equ	0

MAXBALS	equ	70
BALRADIUS	equ	2
BALDIAMETER	equ	2*BALRADIUS
MAXBALDIAMETER	equ 6*2*BALRADIUS
MAXCURSORSTATE	equ 6
CURSORWIDTH	equ	6
COUNDOWNTIME	equ	159

FORCLR	equ #F3E9
BAKCLR	equ #F3EA
BDRCLR	equ #F3EB
CHGCLR	equ #0062
CHGMOD	equ #005F

START	EQU	#a000
; header is created by pasmo  and the --msx switch, the org command should be the first one seen by pasmo
	db	254
	dw	START,einde,START
	org	START
	; color 15,0,0
	ld a,15
	ld (FORCLR),a
	xor a
	ld (BAKCLR),a
	ld (BDRCLR),a
	call CHGCLR
	; screen 8
	ld a,8
	call CHGMOD

	di
	; set screen 8 already done by CHMOD but here we also
	; force the following settings directly in the VDP
	; - disable scanline interupt
	; - enable display
	; - enable vblank interrupt
	; - color 0 is bordercolor
	; - 212 lines and PAL(50 hz) mode
	wrvdp	14,0
	wrvdp	96,1
	wrvdp	8,8
	wrvdp	#82,9
	wrvdp	2,15	

	ld	hl,screen8clear
	call	fullvdpcommand
	call	drawlitlebals
	call	drawcursor
	call	setupsprites

	wrvdp	0,15
	ei

startnextlevel:
	call	setupnextlevel
	;ld a,12;MAXBALS-1
	;ld (ballsingame),a
startlevel:
	ld	a,2
	ld	(gamestate),a
	call	initgame
	;call debugbals
gameloop:
	xor	a
	ld	(ballsinflated),a
	call	clearoldballs
	call	movebals
	call	redrawcirclelist
	call	movecursor
	call	swappage
	;clear redrawlist
	ld	a,255
	ld	hl,redrawlist
	ld	(redrawlistpntrnext),hl
	ld	(hl),a
	ei
	halt
	;call Get_All_Sticks
	ld	a,(ballsinflated)
	ld	e,a
	ld	a,(gamestate)
	cp	1
	jr	nz,gameloop2
	ld	a,(ballsinflated)
gameloop2
	or	a
	jp	nz,gameloop
	; game has ended, did the player win or loose
	ld	a,(ballsneeded)
	ld	b,a
	ld	a,(hitcounter)
	cp	b
	jr	nc,gameloop4
	call	displayretry
	jr	gameloop6
gameloop4
	call	displaywon
gameloop6	; keep moving other balls
	xor	a
	ld	(ballsinflated),a
	call	clearoldballs
	call	movebals
	call	swappage
	;clear redrawlist
	ld	a,255
	ld	hl,redrawlist
	ld	(redrawlistpntrnext),hl
	ld	(hl),a
	ei
	halt
	call	getjoystick
	and	16
	jr	nz,gameloop6
	;loop until space is relieved
gameloop8
	call	getjoystick
	and	16
	jr	z,gameloop8

	;if retry then same level again
	ld	a,(ballsneeded)
	ld	b,a
	ld	a,(hitcounter)
	cp	b
	jp	nc,startnextlevel
	jp	startlevel

displaywon	ld	hl,winsprites
	jp	displayretry2
displayretry
	ld	hl,retrysprites
displayretry2
	di
	wrvdp	2,15
	chkvdp2
	wrvdp	0,15
	wrvdp	0,45
	wrvdp	3,14
	ld	a,4*5
	out	(#99),a
	ld	a,64+#3a
	out	(#99),a
	ld	bc,#98+256*4*8
	otir
	ei
	ret
TEXTOFFSETX	equ	100
TEXTOFFSETY	equ	100
winsprites	db	TEXTOFFSETY,TEXTOFFSETX+0, 11,0	; Y
	db	TEXTOFFSETY,TEXTOFFSETX+8, 12,0	; O
	db	TEXTOFFSETY,TEXTOFFSETX+16, 13,0	; U
	db	TEXTOFFSETY,TEXTOFFSETX+32, 14,0	; W
	db	TEXTOFFSETY,TEXTOFFSETX+40, 15,0	; I
	db	TEXTOFFSETY,TEXTOFFSETX+48, 16,0	; N
	db	212,0,0,0
	db	212,0,0,0

retrysprites	db	TEXTOFFSETY,TEXTOFFSETX+0, 11,0	; Y
	db	TEXTOFFSETY,TEXTOFFSETX+8, 12,0	; O
	db	TEXTOFFSETY,TEXTOFFSETX+16, 13,0	; U
	db	TEXTOFFSETY,TEXTOFFSETX+32, 17,0	; L
	db	TEXTOFFSETY,TEXTOFFSETX+40, 12,0	; O
	db	TEXTOFFSETY,TEXTOFFSETX+48, 18,0	; S
	db	TEXTOFFSETY,TEXTOFFSETX+56, 19,0	; E
	db	212,0,0,0

; end of collecting game

setupnextlevel:
	ld	hl,(levelstructpoint)
	ld	a,(hl)
	ld	(ballsingame),a
	inc	hl
	ld	a,(hl)
	ld	(ballsneeded),a
	inc	hl
	ld	(levelstructpoint),hl
	ld	a,(hl)
	cp	255
	ret	nz
	ld	hl,levelstruct
	ld	(levelstructpoint),hl
	ret


levelstructpoint	dw levelstruct
levelstruct	db	5,3	; balls in game, balls needed
	db	10,7	; balls in game, balls needed
	db	MAXBALS-1,MAXBALS-7	;
	db	255	;end of list marker


debugbals:
	ld	a,6
	ld	(ballsingame),a
	ld	de,ballinfo
	ld	hl,debugbalsdb
	ld	bc,16*6
	ldir
	ret
debugbalsdb	; bal 0
	db	2,192
	dw	0,256*4
	dw	0,256*4
	db	6
	dw	99
	db	0,0,0
	; bal 1
	db	2,192
	dw	0,256*44
	dw	0,256*4
	db	6
	dw	99
	db	0,0,0
	; bal 2
	db	2,192
	dw	0,256*24
	dw	0,256*24
	db	6
	dw	99
	db	0,0,0
	; bal 3
	db	2,192
	dw	0,256*4
	dw	0,256*44
	db	6
	dw	99
	db	0,0,0
	; bal 4
	db	2,192
	dw	0,256*44
	dw	0,256*44
	db	6
	dw	99
	db	0,0,0
	; bal 5
	db	2,28
	dw	0,256*24
	dw	0,256*24
	db	2
	dw	9
	db	0,0,0



val2ascii:
	cp	10
	jr	c,val2ascii2
	add	a,55	; ='A'-10
	ret
val2ascii2:
	add	a,48	; ='0'
	ret

ascii2val:
	sub	48
	cp	10
	ret	c
	sub	7
	ret

movecursor:	; if needed this draws the cursor and add current position to the clearlist
	ld	a,(gamestate)
	cp	2
	ret	nz
	; ok move the cursor coordinates
	call	movecursorbyuser
	ld	a,(cursorstate)
	inc	a
	cp	MAXCURSORSTATE
	jr	c,movecursor2
	xor	a
movecursor2:
	ld	(cursorstate),a
	add	a,a
	add	a,a
	add	a,a
	ld	(movecursorvdpcmd),a
	ld	hl,(clearlistpntrnext)
	ld	a,(cursory)
	ld	(hl),a
	inc	hl
	ld	(movecursorvdpcmd+6),a
	ld	a,(cursorx)
	ld	(hl),a
	inc	hl
	ld	(movecursorvdpcmd+4),a
	ld	a,CURSORWIDTH
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(clearlistpntrnext),hl
	ld	a,255
	ld	(hl),a
	ld	a,(DESTINPAGE)
	ld	(movecursorvdpcmd+7),a
	di
	wrvdp	2,15
	ld	hl,movecursorvdpcmd
	call	fullvdpcommand
	wrvdp	0,15
	ei
	ret
movecursorvdpcmd:		;VDP command 
	dw	0,212+8+0*256	; SX,SY
	dw	0,212+0*256	; DX,DY
	dw	CURSORWIDTH, CURSORWIDTH	; NX,NY
	db	0,0		; color,argument
	db	%10010010	; lmmm-command with tor
	;db %11010000	; HMMM-command
	;

movecursorbyuser:
	xor	a
	call	getjoystick
	ld	hl,(cursorx)
	ld	b,a
	rrc	b
	jr	c,movecursorbyuser1
	; move up
	ld	a,h
	or	a
	jr	z,movecursorbyuser1
	dec	h
movecursorbyuser1:
	rrc	b
	jr	c,movecursorbyuser2
	; move down
	ld	a,h
	cp	212-CURSORWIDTH
	jr	nc,movecursorbyuser2
	inc	h
movecursorbyuser2:
	rrc	b
	jr	c,movecursorbyuser3
	; move left
	ld	a,l
	or	a
	jr	z,movecursorbyuser3
	dec	l
movecursorbyuser3:
	rrc	b
	jr	c,movecursorbyuser4
	; move right
	ld	a,l
	cp	255-CURSORWIDTH
	jr	nc,movecursorbyuser4
	inc	l
movecursorbyuser4:
	ld	(cursorx),hl
	;maybe we pressed firebutton1/space ?
	rrc	b
	ret	c
	;yes we did so start an expanding ball...
	ld	a,(ballsingame)
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ld	bc,ballinfo
	add	hl,bc
	push	hl
	pop	ix
	ld	a,2
	ld	(hl),a
	ld	de,(cursorx)
	ld	(ix+5),e
	ld	(ix+9),d
	ld	a,BALRADIUS
	ld	(ix+10),a
	ld	a,255 and COUNDOWNTIME
	ld	(ix+11),a
	ld	a,COUNDOWNTIME/256
	ld	(ix+12),a
	ld	a,%10110110	; make it a white ball
	ld	(ix+1),a
	ld	a,1
	ld	(gamestate),a
	ld	(ballsinflated),a
	ret


; read the joysticks and transform the keyboard bits to joystick layout
;
;PSG I/O port A (r#14) ? read-only
;  Bit Description Comment 
;  0 Input joystick pin 1 (up)
;  1 Input joystick pin 2 (down)
;  2 Input joystick pin 3 (left)
;  3 Input joystick pin 4 (right)
;  4 Input joystick pin 6 (trigger A) 
;  5 Input joystick pin 7 (trigger B) 
;  6 Japanese keyboard layout bit (1=JIS, 0=ANSI) 
;  7 Cassette input signal
;
getjoystick
	di
	in	a,(#aa)
	and	#f0
	or	8
	out	(#aa),a
	nop
	in	a,(#a9)
	ei
	ld	e,a
	rra
	rra
	rra
	rra
	and	15
	ld	c,a
	ld	b,0
	ld	hl,cursorjoystickmap
	add	hl,bc
	ld	a,(hl)
	; now read spacebar as trigger1
	ld	d,a
	ld	a,e
	and	1
	ld	a,d
	ret	nz
	xor	#10
	ret

cursorjoystickmap
	db	#F0,#F4,#F1,#F5
	db	#F2,#F6,#F3,#F7
	db	#F8,#FC,#F9,#FD
	db	#FA,#FE,#FB,#FF

swappage:
	; first make sure that all copies are actually finished
	; to avoid flikering press-any-key messages for instance...
	DI
	wrvdp	2,15
	chkvdp2
	wrvdp	0,15
	; we swap pages
	LD	HL,(PAGES)
	LD	A,L
	LD	L,H
	LD	H,A
	LD	(PAGES),HL
	LD	A,L
	LD	(DESTINPAGE),A
	ld	a,h
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,#1f
	OUT	(#99),A
	LD	A,2+128
	OUT	(#99),A
	ei
	ld	hl,clearlist1
	ld	a,(DESTINPAGE)
	or	a
	jp	z,swappage2
	ld	hl,clearlist2
swappage2:
	ld	(clearlistpointer),hl
	ld	(clearlistpntrnext),hl
	ret
PAGES:	DB	1,0
DESTINPAGE:	DB	0


initgame:
	; resets all tables and initialises the random positions of the balls and speed
	; IN: n/a
	; OUT: n/a
	; CHANGES:	Everything
	; CODE: 
	; first reset all bytes
	xor	a
	; ballinfo to zero
	ld	hl,ballinfo
	ld	de,1+ballinfo
	ld	(hl),a
	ld	bc,ballinfoend-ballinfo
	ldir
	; clear bytemap
	ld	hl,bytemap
	ld	de,bytemap+1
	ld	bc,64*64-1
	ld	(hl),a
	ldir
	; clearlists to 255
	ld	a,255
	ld	hl,clearlist1
	ld	(hl),a
	ld	de,1+clearlist1
	ld	bc,clearlistend-clearlist1
	ldir
	; now fill the ballinfo
	ld	a,(ballsingame)
	ld	b,a
	ld	ix,ballinfo
initgame2:
	push	bc
	; state
	ld	a,1
	ld	(ix+0),a
	; color
	call	RANDOM
	and	31*8
	ld	(ix+1),a
	; initial position Y and X
	xor	a
	ld	(ix+8),a
	ld	(ix+4),a
	call	RANDOM
	and	248
	cp	210-8
	jr	c,initgame3
	sub	120
initgame3:
	inc	a
	ld	(ix+9),a
	call	RANDOM
	cp	252-BALDIAMETER
	jr	c,initgame4
	sub	128
initgame4:
	inc	a
	ld	(ix+5),a
	;now a random direction determines x/y speed
	call	RANDOM
	ld	h,sintab/256
	ld	l,a
	ld	a,(hl)
	ld	c,a
	ld	(ix+6),a
	ld	a,64
	add	a,l
	ld	l,a
	ld	a,(hl)
	ld	(ix+2),a
	and	128
	jr	z,initgame5
	ld	a,255
initgame5:
	ld	(ix+3),a
	ld	a,c
	and	128
	jr	z,initgame6
	ld	a,255
initgame6:
	ld	(ix+7),a
	; radius
	ld	a,BALRADIUS
	ld	(ix+10),a
	ld	a,255 and COUNDOWNTIME
	ld	(ix+11),a
	ld	a,COUNDOWNTIME/256
	ld	(ix+12),a

	ld	bc,16
	add	ix,bc

	pop	bc
	djnz	initgame2

	;set cursor in center of screen
	ld	a,128-CURSORWIDTH/2
	ld	(cursorx),a
	ld	a,86-CURSORWIDTH/2
	ld	(cursory),a
	; set correct sprites
	xor	a
	ld	(hitcounter),a
	ld	(spritesdb2+2),a
	ld	(spritesdb2+6),a
	ld	a,(ballsingame)
	call	atobcdecimal
	ld	a,b
	ld	(spritesdb2+14),a
	ld	a,c
	ld	(spritesdb2+18),a
	di
	wrvdp	2,15
	chkvdp2
	wrvdp	0,45
	wrvdp	3,14
	xor	a
	out	(#99),a
	ld	a,64+#3a
	out	(#99),a
	ld	bc,#98+256*4*32
	ld	hl,spritesdb2
	otir
	;backdrop to black
	wrvdp	0,7
	ld	hl,screen8clearpage0
	call	fullvdpcommand
	ld	hl,screen8clearpage1
	call	fullvdpcommand
	wrvdp	0,15
	ei
	ret
	; 
clearoldballs:
	; clear all BALDIAMETER x BALDIAMETER rectangles first with BGCOLOR before drawing all the new balls
	; 
	;ld a,(ballsingame)
	;inc a
	;ld b,a
	ld	a,(DESTINPAGE)
	ld	(clearoldballsvdpcmd+7),a
	ld	a,(bgcolor)
	ld	(clearoldballsvdpcmd+12),a
	ld	hl,(clearlistpointer)
clearoldballs2:
	ld	a,(hl)	; y
	cp	255
	ret	z

	inc	hl
	ld	(clearoldballsvdpcmd+6),a
	ld	a,(hl)	; x
	inc	hl
	ld	(clearoldballsvdpcmd+4),a
	ld	a,(hl)	; width
	inc	hl
	ld	(clearoldballsvdpcmd+8),a
	ld	a,(hl)	; height
	inc	hl
	ld	(clearoldballsvdpcmd+10),a
	;push bc
	push	hl
	ld	hl,clearoldballsvdpcmd
	di
	wrvdp	2,15
	call	fullvdpcommand
	wrvdp	0,15
	ei
	pop	hl
	;pop bc
	jp	clearoldballs2
	;djnz clearoldballs2
	;ret

clearoldballsvdpcmd:		;VDP command 
	dw	0,0*256	; SX,SY
	dw	0,212+0*256	; DX,DY
	dw	BALDIAMETER, BALDIAMETER	; NX,NY
	db	0,0		; color,argument
	db	%11000000	; HMMV-command
	;

	;

movebals:
	; dispatch actions according to state
	; CODE 
	ld	hl,ballinfo
	ld	a,(ballsingame)
	inc	a
	ld	b,a
movebals1:
	ld	a,(hl)
	cp	1
	jp	z,movebals2
	jp	nc,movebals3
	; it is zero (0)
	; so do nothing and move to next 
	ld	de,16
	add	hl,de
	djnz	movebals1
	ld	hl,(clearlistpntrnext)
	ld	a,255
	ld	(hl),a
	ret
movebals2:
	;it is one (1)
	push	bc
	call	movebalsmove
movebalspopbc:
	pop	bc
	djnz	movebals1
	ld	hl,(clearlistpntrnext)
	ld	a,255
	ld	(hl),a
	ret
movebals3:
	ex	af,af'
	ld	a,1
	ld	(ballsinflated),a
	ex	af,af'
	cp	3
	jp	c,movebals5
	jp	z,movebals6
	cp	5
	jp	c,movebals4
	; it is five (5)
	push	bc
	call	balsshrinkcleanup
	jr	movebalspopbc

movebals4:
	; it is four (4)
	push	bc
	call	balsshrink
	jr	movebalspopbc
movebals5:
	; it is two (2)
	push	bc
	call	movebalsgrow
	jr	movebalspopbc
movebals6:
	; it is three (3)
	push	bc
	call	movebalscountdown
	jr	movebalspopbc
	;

movebalsmove:
	; Move a bal and redraw it!
	; IN: HL points to ballinfo
	; OUT: HL+16
	; CHANGES: all
	; CODE 
	inc	hl
	inc	hl

	push	hl
	call	movebalsmovesub
	pop	hl
	call	movebalsmovesub

	; now copy the new ball position
	push	hl
	dec	hl
	ld	a,(hl)	; Y
	ld	e,a
	ld	(movebalsmovevdpcmd+6),a
	ld	a,(DESTINPAGE)
	ld	(movebalsmovevdpcmd+7),a
	ld	bc,-4
	add	hl,bc
	ld	a,(hl)	; X
	ld	d,a
	ld	(movebalsmovevdpcmd+4),a
	add	hl,bc
	ld	a,(hl)	; color
	ld	(movebalsmovevdpcmd+0),a

	;store y,x and diameter on the clearlist
	ld	hl,(clearlistpntrnext)
	ld	(hl),e
	inc	hl
	ld	(hl),d
	inc	hl
	ld	a,BALDIAMETER
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(clearlistpntrnext),hl
	; now check if this x and y are in bytemap marked as being occupied
bytemapcheck
	ld	a,e
	srl	a
	srl	a
	ld	h,a
	ld	l,d
	srl	h
	rr	l
	srl	h
	rr	l
	ld	de,bytemap
	add	hl,de
	ld	a,(hl)
	or	a
	jp	z,movebalsmove9
	; seems occupied so now we need to go to growing ball
	pop	hl
	push	hl
	ld	bc,-10
	add	hl,bc
	ld	a,2
	ld	(hl),a
	call	increasecounter
movebalsmove9
	; perform the copy
	di
	wrvdp	2,15
	ld	hl,movebalsmovevdpcmd
	call	fullvdpcommand
	wrvdp	0,15
	ei
	pop	hl
	ld	bc,6
	add	hl,bc
	ret

movebalsmovesub:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)	; de=X-Speed
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)	; bc=X
	ex	de,hl
	add	hl,bc
	ex	de,hl
	ld	(hl),d
	dec	hl
	ld	(hl),e	; store X
	inc	hl
	inc	hl
	; now check if (x==0) || (x>255-BALDIAMETER)
	; if so we need to reverse the x-speed
	push	hl
	ld	a,d
	or	a
	jp	z,movebalsmove2
	cp	255-BALDIAMETER
	jp	c,movebalsmove3
movebalsmove2:		; we need to inverse x-speed
	ld	bc,-4
	add	hl,bc
	ld	a,(hl)
	cpl
	ld	e,a
	inc	hl
	ld	a,(hl)
	cpl
	ld	d,a	; de=X-Speed xor 0xFFFF
	inc	de
	ld	(hl),d
	dec	hl
	ld	(hl),e

movebalsmove3:
	pop	hl
	; now the same for Y
	ld	e,(hl)
	inc	hl
	ld	d,(hl)	; de=Y-Speed
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)	; bc=Y
	ex	de,hl
	add	hl,bc
	ex	de,hl
	ld	(hl),d
	dec	hl
	ld	(hl),e	; store Y
	inc	hl
	inc	hl
	; now check if (x==0) || (x>211-BALDIAMETER)
	; if so we need to reverse the x-speed
	push	hl
	ld	a,d
	or	a
	jp	z,movebalsmove4
	cp	211-BALDIAMETER
	jp	c,movebalsmove5
movebalsmove4:		; we need to inverse y-speed
	ld	bc,-4
	add	hl,bc
	ld	a,(hl)
	cpl
	ld	e,a
	inc	hl
	ld	a,(hl)
	cpl
	ld	d,a	; de=y-Speed xor 0xFFFF
	inc	de
	ld	(hl),d
	dec	hl
	ld	(hl),e

movebalsmove5:
	pop	hl
	ret

movebalsmovevdpcmd		; vdp command 
		dw 0,212+0*256	; sx,sy
		dw 60,60	; dx,dy
		dw BALDIAMETER, BALDIAMETER	; nx,ny
		db 0,0		; color,argument
		db %10010010	; lmmm-command with tor
			;

	; 

movebalsgrow:
	; while BALDIAMETER < MAXBALDIAMETER increase and draw
	push	hl
	pop	ix
	; first clear the bytemap from previous smaller if needed
	; if this is the first time (==smallest diameter) then there
	; isn't any info in the bytemap yet, so we do not clean up
	ld	a,(ix+10)
	cp	BALRADIUS
	jr	z,movebalsgrow1

	ld	a,63
	ld	(circlinebordxmax1+1),a
	ld	(circlinebordxmax2+1),a
	ld	a,(ix+5)	; X
	srl	a
	srl	a
	ld	e,a
	ld	a,(ix+9)	; Y
	srl	a
	srl	a
	ld	d,a
	ld	a,(ix+10)
	srl	a
	srl	a
	inc	a
	call	circleborder
	call	circleclearmap
movebalsgrow1


	ld	a,(ix+10)
	cp	MAXBALDIAMETER
	jr	nc,movebalsgrow2
	;;increase diameter
	inc	a
	inc	a
	ld	(ix+10),a
	jp	movebalsgrow3
movebalsgrow2:		; we reached the max already previous drawing so we draw on this page and continue to the countdown
	ld	a,3
	ld	(ix+0),a

movebalsgrow3:
;;	ld a,(ix+1)
;;	ld (drawcircle0+1),a
	;ld c,%00000010 ; OR command
	;ld de,0
	;ld hl,212+255*256
	;call filledcirclebounds
;;	ld a,255
;;	ld (circlinebordxmax1+1),a
;;	ld (circlinebordxmax2+1),a
;;	ld a,(ix+5) ; X
;;	ld e,a
;;	ld a,(ix+9) ; Y
;;	ld d,a
;;	ld a,(ix+10)
;;	call circleborder
;;	call drawcircle
	call	ixtoballnr
	call	addtoredrawlist
	;now adjust the bytemap
;;	ld a,63
;;	ld (circlinebordxmax1+1),a
;;	ld (circlinebordxmax2+1),a
	ld	a,(ix+5)	; X
	srl	a
	srl	a
	ld	e,a
	ld	a,(ix+9)	; Y
	srl	a
	srl	a
	ld	d,a
	ld	a,(ix+10)
	srl	a
	srl	a
	inc	a
	call	circleborder
	call	circlesetmap
	; point to next
	ld	de,16
	push	ix
	pop	hl
	add	hl,de
	ret

balsshrink:
	push	hl
	pop	ix
	; first clear this one next time
	call	movebalscountdown2
	; then clear the bytemap from previous bigger on
	ld	a,63
	ld	(circlinebordxmax1+1),a
	ld	(circlinebordxmax2+1),a
	ld	a,(ix+5)	; X
	srl	a
	srl	a
	ld	e,a
	ld	a,(ix+9)	; Y
	srl	a
	srl	a
	ld	d,a
	ld	a,(ix+10)
	srl	a
	srl	a
	inc	a
	call	circleborder
	call	circleclearmap
	ld	a,(ix+10)
	dec	a
	dec	a
	ld	(ix+10),a
	cp	BALDIAMETER
	jr	nz,balsshrink2
	; bal fully shrunken
	ld	a,5
	ld	(ix+0),a
	ld	a,2
	ld	(ix+11),a
	jr	balsshrink3
balsshrink2
	; now fill bytemap since not yet fully shrunken
	ld	a,(ix+5)	; X
	srl	a
	srl	a
	ld	e,a
	ld	a,(ix+9)	; Y
	srl	a
	srl	a
	ld	d,a
	ld	a,(ix+10)
	srl	a
	srl	a
	inc	a
	call	circleborder
	call	circlesetmap
balsshrink3
	; make sure it is drawn with the current diameter
	call	ixtoballnr
	push	af
	call	addtoredrawlist
	pop	af
balsshrinkend
	; checkball colision with countdown bals
	call	chkcolisioncntdown
	; point to next
	push	ix
	pop	hl
	ld	de,16
	add	hl,de
	ret

balsshrinkcleanup:
	push	hl
	pop	ix
	ld	a,(ix+11)
	dec	a
	ld	(ix+11),a
	jr	nz,balsshrinkcleanup2
	ld	(hl),a	; end cleaning up, state =0
balsshrinkcleanup2:
	call	ixtoballnr
	jp	balsshrinkend


movebalscountdown:
	push	hl
	pop	ix
	ld	e,(ix+11)
	ld	d,(ix+12)
	dec	de
	ld	(ix+11),e
	ld	(ix+12),d

	; point to next
	ld	bc,16
	add	hl,bc

	ld	a,e
	or	d
	ret	nz
	; countdown reached, start shrinking the ball
	ld	a,4
	ld	(ix+0),a
	push	hl
	call	movebalscountdown2
	pop	hl
	ret
	; and make sure next time we visit this page we clear the curretn size of the ball
	; since this clearing is called before the ballshrinking routine
movebalscountdown2
	call	ixtoballnr
	call	getencloserectangle
	ld	hl,(clearlistpntrnext)
	ld	(hl),d
	inc	hl
	ld	(hl),b
	inc	hl
	;now
	ld	a,c
	sub	b
	ld	(hl),a
	inc	hl
	ld	a,e
	sub	d
	ld	(hl),a
	inc	hl
	ld	a,255
	ld	(hl),a
	ld	(clearlistpntrnext),hl
	ret

addtoredrawlist:
	; IN A=nr ball
	; CHANGES: all
	; CODE 
	ld	d,a
	ld	hl,(redrawlistpntrnext)
	ld	a,255 and redrawlist
	cp	l
	jr	nz,addtoredrawlist3
	ld	a,redrawlist/256
	cp	h
	jr	z,addtoredrawlist5
addtoredrawlist3
	; check if d alread in list
	dec	hl
	ld	a,d
	cp	(hl)
	ret	z	; already in list
	; are we on first element ?
	ld	a,255 and redrawlist
	cp	l
	jr	nz,addtoredrawlist3
	ld	a,redrawlist/256
	cp	h
	jr	nz,addtoredrawlist3
	; not in list so add
	ld	hl,(redrawlistpntrnext)
addtoredrawlist5
	ld	(hl),d
	inc	hl
	ld	(redrawlistpntrnext),hl
	ld	a,255
	ld	(hl),a
	ret
	;

ixtoballnr:
	; IN IX=pointer to ballinfo
	; OUT a=ballnumber
	; CHANGES: hl,de
	; CODE 
	push	ix
	pop	hl
	ld	de,ballinfo
	or	a
	sbc	hl,de
	srl	h
	rr	l
	srl	h
	rr	l
	srl	h
	rr	l
	srl	h
	rr	l
	ld	a,l
	ret
	; 

chkcolisioncntdown:
	; IN A=ballnumber (of shrinking bal atm)
	; IN ix=pointer to balinfo if ball A
	; CHANGES: all
	; CODE 
	; first get boundaryrect
	call	getencloserectangle
	ld	a,b
	ld	(chkcolbalxmin+1),a
	ld	a,c
	ld	(chkcolbalxmax+1),a
	ld	a,d
	ld	(chkcolbalymin+1),a
	ld	a,e
	ld	(chkcolbalymax+1),a
	; now loop over all ballinfo
	ld	hl,ballinfo
	ld	c,0
chkcolisioncntdown1
	ld	a,(hl)
	cp	3
	jp	nz,chkcolisioncntdown2
	push	hl
	push	bc
	call	chkcolisioncntdown3
	pop	bc
	pop	hl
chkcolisioncntdown2
	ld	de,16	; next ball
	add	hl,de
	inc	c	; increase counter
	ld	a,(ballsingame)
	inc	a
	cp	c
	jp	nz,chkcolisioncntdown1
	ret

chkcolisioncntdown3
	; maybe ball 'c' is already on the redraw list so checking this might be faster
	ld	hl,redrawlist
chkcolisioncntdown4
	ld	a,(hl)
	cp	c
	ret	z	;jr z,chkcolisioncntdown5
	inc	a
	jr	z,chkcolisioncntdown6
	inc	hl
	jp	chkcolisioncntdown4

;chkcolisioncntdown5	; in list so return
;	ret

chkcolisioncntdown6	; not in list yet so check and add if needed
	ld	a,c
	ex	af,af'	; instead of string in memory temporarly
	ld	a,c
	; first get boundaryrect of this bal
	call	getencloserectangle
	ld	a,b
chkcolbalxmax	cp	0	; bal Xmin > Xmax shrinking bal 
	jr	z,chkcolbal2
	ret	nc
chkcolbal2
	ld	a,c
chkcolbalxmin	cp	0	; bal Xmax < Xmin
	ret	c
	ld	a,d
chkcolbalymax	cp	0	; bal Ymin >Ymax shrinking bal
	jr	z,chkcolbal3
	ret	nc
chkcolbal3
	ld	a,e
chkcolbalymin	cp	0	; bal ymax <Ymin shrinking bal
	ret	c
	; seems like we need to add this bal to the redrawlist
	ex	af,af'
	;  call addtoredrawlist
	;  ret
	;call+ret can be made simpler as jump
	jp	addtoredrawlist




	;

redrawcirclelist:
	; go through the redrawlist and draw all the circles mentioned in it
	; CODE 
	ld	hl,redrawlist
	ld	a,255
	ld	(circlinebordxmax1+1),a
	ld	(circlinebordxmax2+1),a
redrawcirclelist1
	ld	a,(hl)
	cp	255
	ret	z
	push	hl
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ld	bc,ballinfo
	add	hl,bc
	push	hl
	pop	ix
	ld	a,(ix+1)
	ld	(drawcircle0+1),a
	ld	a,(ix+5)	; X
	ld	e,a
	ld	a,(ix+9)	; Y
	ld	d,a
	ld	a,(ix+10)
	call	circleborder
	call	drawcircle

	pop	hl
	inc	hl
	jp	redrawcirclelist1
	; 

getencloserectangle
	; IN a=nr ball
	; OUT B,C=Xmin,Xmax
	;     D,E=Ymin,Ymax
	; changes: all
	; CODE 
	ld	h,0
	ld	l,a
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ld	de,ballinfo+5
	add	hl,de
	; hl is now the ballinfo+5 of ball a (thus on X of ballinfo)
	ld	b,(hl)
	ld	de,4
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	a,b
	sub	(hl)
	jr	nc,getencloserectangle2
	xor	a	; went negative so clip to 0
getencloserectangle2
	ld	d,a
	ld	a,b
	inc	a
	add	a,(hl)
	jr	nc,getencloserectangle3
	ld	a,255	; went over 255 so clip
getencloserectangle3
	ld	e,a
	push	de
	ld	a,c
	sub	(hl)
	jr	nc,getencloserectangle4
	; went negative so clip to 0
	xor	a
getencloserectangle4
	ld	d,a
	ld	a,c
	inc	a
	add	a,(hl)
	jr	nc,getencloserectangle5
	ld	a,211	; went over 255 so clip to border of screen
	jp	getencloserectangle6
getencloserectangle5
	cp	211
	jr	c,getencloserectangle6
	ld	a,211	; between 255 adn 211 so to border of screen
getencloserectangle6
	ld	e,a
	pop	bc
	ret

	; 


;circlesetmap	ld a,%00111100 ; inc A
circlesetmap	ld	a,%00110100	; inc (HL)
	jp	circletomap

circleclearmap	ld a,%00110101	; dec (HL)

circletomap	ld	(circletomapcmd),a
	ld	a,(circborderstarty)
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ld	de,bytemap
	add	hl,de
	ex	de,hl
	ld	hl,circborderarray
	ld	a,(hl)
circletomaploop1
	ld	b,a
	inc	hl
	ld	a,(hl)
	inc	hl
	push	hl
	push	de
	ex	de,hl
	ld	e,a
	ld	d,0
	add	hl,de
circletomaploop2
circletomapcmd	inc (hl)
	inc	hl
	djnz	circletomaploop2
	pop	de
	ld	hl,64
	add	hl,de
	ex	de,hl
	pop	hl
	ld	a,(hl)
	or	a
	jp	nz,circletomaploop1
	ret

filledcirclebounds
; b is color, c is operand
; d,e= (x,y) upper left inclusive boundary
; h,l= (x,y) lower right inclusive boundary
;  WIJZIGT  : A
	ld	a,b
	ld	(bioscirk0+1),a
	ld	a,#70
	or	c
	ld	(bioscirk_cmd1+1),a
	ld	a,e
	ld	(bioscirk_lowy+1),a
	ld		a,l
	ld	(bioscirk_highy+1),a
	ld	a,d
	ld	(bioscirk_lowx+1),a
	ld	(bioscirk_lowx2+1),a
	ld	(bioscirk_lowx3+1),a
	ld	a,h
	ld	(bioscirk_highx+1),a
	ld	(bioscirk_highx2+1),a
	ld	(bioscirk_highx3+1),a
	ret
;
; bereken border van de cirkel
; in : DE = y*256+x , A is straal
;
; wijzigt : bc,de,hl,af
circleborder
	ld	(bioscirkmid),de
	ld	(bioscirkradius),a
	ld	(circborderoffset),a
	ld	l,a
	ld	a,d
	sub	l
	jr	nc,circelborder0
	ld	a,d
	ld	(circborderoffset),a
	xor	a
circelborder0
	ld	(circborderstarty),a

	;mark length 0 for final length
	push	bc
	push	de
	push	hl
	ld	a,(bioscirkradius)
	inc	a
	add	a,a
	ld	c,a
	ld	b,0
	ld	a,(circborderoffset)
	add	a,a
	ld	e,a
	ld	d,b
	ld	hl,circborderarray
	add	hl,de
	xor	a
	ld	(hl),a
	ld	e,l
	ld	d,h
	inc	de
	ldir
	pop	hl
	pop	de
	pop	bc

	; special first case
	ld	a,(bioscirkradius)
	ld	b,a
	ld	c,0
	call	circlineborder

	ld	a,(bioscirkradius)
	ld	b,a	; b is offset-part1 
	ld	c,0
; init errorterm
	ld	hl,3
	xor	a
	ld	c,a	; offset-part2 
	ld	d,a
	ld	e,b
	sbc	hl,de
	or	a
	sbc	hl,de	; hl is de foutterm 
; hier begint de lus
circelborder1

	ld	a,h
	or	a
	jp	p,circelborder2

	; error tem is negative
	ld	d,0
	ld	e,c
	sla	e
	rl	d
	sla	e
	rl	d
	add	hl,de
	ld	de,6
	add	hl,de
	jp	circelborder3

circelborder2
	; error tem is positive
	ld	d,255
	ld	a,c
	sub	b
	add	a,a	; ipv sla     e 
	rl	d
	add	a,a	; ipv sla     e 
	ld	e,a
	rl	d
	add	hl,de
	ld	de,10
	add	hl,de
	; the value (reg b) will be changed 
	; so we need to draw some of the lines with the previous value 
	ld	a,b
	sub	c
	cp	1
	jr	z,circelborder25
	push	hl
	push	bc
	ld	a,b
	ld	b,c
	ld	c,a
	call	circlineborder
	ld	a,c
	neg
	ld	c,a
	call	circlineborder
	pop	bc
	pop	hl
circelborder25
	dec	b
circelborder3
	inc	c
	push	hl
	push	bc
	call	circlineborder
	ld	a,c
	neg
	ld	c,a
	call	circlineborder
	pop	bc
	pop	hl
	ld	a,c
	cp	b
	jp	c,circelborder1
	ret

circlineborder
	; in b=x-adjust, c=y-adjust
	; assumption b is allows positive!!!
	;
	; CHANGES AF,DE,HL!!
	ld	a,(bioscirkmid+1)
	add	a,c
	cp	212
	ret	nc	;either negative or below screen border so do nothing


	ld	a,(circborderoffset)
	add	a,c
	ld	l,a
	xor	a
	ld	d,a
	ld	h,a
	add	hl,hl
	ld	de,circborderarray
	add	hl,de	; hl is were to write length+x info

	ld	a,(bioscirkmid)
	ld	e,a


	ld	a,(bioscirkmid)
	sub	b	; sub a,b
	jr	nc,circlineborder3
	xor	a
circlineborder3
	ld	e,a
	ld	a,(bioscirkmid)
	add	a,b
	jr	nc,circlineborder6
	ld	a,255
circlineborder6
circlinebordxmax1
	cp	255
	jr	z,circlineborder7
	jr	c,circlineborder7
circlinebordxmax2
	ld	a,255
circlineborder7
	sub	e
	;inc a ; do we need this extra pixel ?
	ld	(hl),a
	inc	hl
	ld	(hl),e
	ret

; use the array build by circleborder to actually draw the circle on screen
drawcircle
	di
	wrvdp	2,15
	chkvdp2
	wrvdp	36,17
	xor	a
	out	(#9b),a
	out	(#9b),a	; SX 
	out	(#9b),a
	ld	a,(DESTINPAGE)
	out	(#9b),a	; SY 
	xor	a
	out	(#9b),a
	out	(#9b),a	; maj 
	out	(#9b),a
	out	(#9b),a	; min 
drawcircle0	ld	a,252
	out	(#9b),a	; color 
	xor	a
	out	(#9b),a	; richting 

	ld	hl,circborderarray
	ld	a,(circborderstarty)
	ld	d,a
drawcircleloop
	chkvdp2
	ld	a,d
	out	(#99),a
	inc	d
	ld	a,128+38
	out	(#99),a	; SY

	ld	a,(hl)
	inc	hl
	out	(#99),a
	ld	a,128+40
	out	(#99),a	; majorant

	ld	a,(hl)
	inc	hl
	out	(#99),a
	ld	a,128+36
	out	(#99),a	; SX

	ld	a,#72	; line + OR operator
	out	(#99),a
	ld	a,128+46
	out	(#99),a	; opstarten lijn  

	ld	a,(hl)
	or	a
	jp	nz,drawcircleloop
	wrvdp	0,15
	ei
	ret

; Draw a filled circle.
; This is an MSX2 implementation of the Bresenham circle algoritm
; In A=radius
;    D=Y coordinate
;    E=X coordinate
;
; gevulde cirkel teken routine
; in : DE = y*256+x , A is straal
;
; wijzigt : bc,de,hl,af

filledcircle
	ld	(bioscirkmid),de
	ld	b,a	; b is offset-part1 
; init VDP registers for drawing vertical lines
	;minorant                 =0 
	;vram    , naar beneden, min =0, destinpage etc 
	chkvdp2
	di
	wrvdp	36,17
	xor	a
	out	(#9b),a
	out	(#9b),a	; SX 
	out	(#9b),a
	ld	a,(DESTINPAGE)
	out	(#9b),a	; SY 
	xor	a
	out	(#9b),a
	out	(#9b),a	; maj 
	out	(#9b),a
	out	(#9b),a	; min 
	; the color will be changed by the calling code
bioscirk0	ld	a,15	; self modifying code!!! 
	out	(#9b),a	; color 
	xor	a
	out	(#9b),a	; direction 
	ei
	ld	c,a
	call	circlinepart
	ei

; init errorterm
	ld	hl,3
	xor	a
	ld	c,a	; offset-part2 
	ld	d,a
	ld	e,b
	sbc	hl,de
	or	a
	sbc	hl,de	; hl is the error-term
; start of loop
bioscirk1

	ld	a,h
	or	a
	jp	p,bioscirk2

	; error-term is negative
	ld	d,0
	ld	e,c
	sla	e
	rl	d
	sla	e
	rl	d
	add	hl,de
	ld	de,6
	add	hl,de
	jp	bioscirk3

bioscirk2
	; error tem is positive
	ld	d,255
	ld	a,c
	sub	b
	add	a,a	; instead of sla e 
	rl	d
	add	a,a	; instaed of sla e 
	ld	e,a
	rl	d
	add	hl,de
	ld	de,10
	add	hl,de
	; the value (reg b) will be changed 
	; so we need to draw some of the lines with the previous value 
	ld	a,b
	sub	c
	cp	1
	jr	z,bioscirk25
	push	hl
	push	bc
	ld	a,b
	ld	b,c
	ld	c,a
	call	circlinepart
	ei
	ld	a,c
	neg
	ld	c,a
	call	circlinepart
	ei
	pop	bc
	pop	hl
bioscirk25
	dec	b
bioscirk3
	inc	c
	push	hl
	push	bc
	call	circlinepart
	ei
	ld	a,c
	neg
	ld	c,a
	call	circlinepart
	ei
	pop	bc
	pop	hl
	ld	a,c
	cp	b
	jp	c,bioscirk1
	ret

bioscirkmid	dw	0	; y*256 + x 
bioscirkradius	db 0

circborderoffset	db 0
circborderstarty	db 0
circborderarray	ds MAXBALDIAMETER*2+4
	db	128,64,32,16	;debug bytes to check boundaries

circlinepart
	; in b=x-adjust, c=y-adjust
	; assumption b is allows positive!!!
	;
	; CHANGES AF,HL!!

	; check if Y in boundaries
	chkvdp2
	ld	a,(bioscirkmid)
	add	a,c
bioscirk_lowy	cp	0	; lower y boundary
	ret	c
bioscirk_highy	cp 0	; higher y boundary
	jr	z,circlinepart2
	ret	nc
circlinepart2
	di
	out	(#99),a
	ld	a,128+38
	out	(#99),a	; SY

	ld	a,(bioscirkmid+1)
	sub	b	; sub a,b
	jr	nc,circlinepart3
	xor	a
circlinepart3
bioscirk_highx	cp 130	; highest X boundary
	jr	z,circlinepart4
	ret	nc	; if left point of circle line is at right side of boundary....
circlinepart4
bioscirk_lowx	cp	30	; lower x boundary
	jr	nc,circlinepart5
bioscirk_lowx2		ld a,30	; lower x boundary
circlinepart5
	ld	h,a
	out	(#99),a
	ld	a,128+36
	out	(#99),a	; SX

	ld	a,(bioscirkmid+1)
	add	a,b
	jr	nc,circlinepart6
	ld	a,255
circlinepart6
bioscirk_lowx3	cp 30	; lower x boundary
	ret	c	; right point at leftside of lower boundary...
bioscirk_highx2	cp 130	; highest X boundary
	jr	c,circlinepart7
bioscirk_highx3	ld a,130	; highest X boundary
circlinepart7
	sub	h
	inc	a
	out	(#99),a
	ld	a,128+40
	out	(#99),a	; majorant

bioscirk_cmd1	ld	a,#70
	out	(#99),a
	ld	a,128+46
	out	(#99),a	; opstarten lijn  
	ret



fullvdpcommand:
	; transfer execute vdp command:
	; IN HL=bytes to send
	; CHANGES:	HL,BC
	; 
	ld	bc,#9b+256*15
	chkvdp2
	;di
	wrvdp	32,17
	otir
	ret
	; 


;routine voor random getallen
RANDOM:
; In A random number 0-255
; changes A
	PUSH	BC
	LD	A,R
	LD	C,A
	RRCA
	RRCA
	RRCA
	RRCA
	XOR	C
	AND	15
	LD	C,A
	LD	A,R
	LD	B,A
	RLCA
	RLCA
	RLCA
	RLCA
	XOR	B
	AND	240
	ADD	A,C
	PUSH	AF
	LD	A,(RNDGTL)
	RLCA
	LD	C,A
	POP	AF
	XOR	C
	LD	(RNDGTL),A
	POP	BC
	RET

RNDGTL:	DEFB	0

drawlitlebals:
	; assumes di and wrvdp2,15 done
	ld	b,0
drawlitlebals2:
	push	bc
	ld	l,b
	srl	l
	srl	l
	ld	h,0
	ld	de,colorcodes
	add	hl,de
	ld	a,(hl)
	ld	(screen8baldraw1+12),a
	ld	(screen8baldraw2+12),a
	ld	a,b
	ld	(screen8baldraw1+4),a
	inc	a
	ld	(screen8baldraw2+4),a
	ld	hl,screen8baldraw1
	call	fullvdpcommand
	ld	hl,screen8baldraw2
	call	fullvdpcommand
	pop	bc
	dec	b
	dec	b
	dec	b
	djnz	drawlitlebals2
	ret

drawcursor	ld	b,6
drawcursor1
	push	bc
	ld	l,b
	dec	l
	ld	h,0
	ld	de,drawcursorcolor
	add	hl,de
	ld	a,(hl)
	ld	(screen8cursordraw+12),a
	ld	hl,screen8cursordraw
	call	fullvdpcommand
	ld	hl,screen8cursordraw2
	call	fullvdpcommand
	ld	a,(screen8cursordraw+4)
	add	a,8
	ld	(screen8cursordraw+4),a
	inc	a
	ld	(screen8cursordraw2+4),a
	pop	bc
	djnz	drawcursor1
	ret
drawcursorcolor	db 255,219,183,147,111,75

increasecounter:
	push	hl
	push	bc
	push	de
	ld	a,(hitcounter)
	inc	a
	ld	(hitcounter),a
	call	atobcdecimal
	ld	a,b
	ld	(spritesdb2+2),a
	ld	a,c
	ld	(spritesdb2+6),a
	di
	wrvdp	2,15
	chkvdp2
	wrvdp	0,15
	wrvdp	0,45
	wrvdp	3,14
	xor	a
	out	(#99),a
	ld	a,64+#3a
	out	(#99),a
	ld	bc,#98+256*4*2
	ld	hl,spritesdb2
	otir
	; change border color if needed
	ld	a,(ballsneeded)
	ld	b,a
	ld	a,(hitcounter)
	cp	b
	jr	nz,increasecounter2
	wrvdp	255,7
increasecounter2:
	ei
	pop	de
	pop	bc
	pop	hl
	ret
atobcdecimal
	ld	bc,0
atobcdecimal2
	sub	10
	jr	c,atobcdecimal3
	inc	b
	jp	atobcdecimal2
atobcdecimal3
	add	a,10
	ld	c,a
	ret
setupsprites:
	; assumes di and wrvdp2,15 done
	wrvdp	#1E,6	;sprite pattern on 0xf000
	wrvdp	#01,11	;sprite atrib on 0xfa00
	wrvdp	#F4,5	;sprite atrib on 0xfa00
	; write spritespatterns to 0xf000
	chkvdp2
	wrvdp	0,45
	wrvdp	3,14
	xor	a
	out	(#99),a
	ld	a,64+#30
	out	(#99),a
	ld	bc,#98+256*8*20
	ld	hl,spritesdb
	otir

	xor	a
	out	(#99),a
	ld	a,64+#3a
	out	(#99),a
	ld	bc,#98+256*4*32
	ld	hl,spritesdb2
	otir
	; and sprite colors
	xor	a
	out	(#99),a
	ld	a,64+#38
	out	(#99),a
	ld	bc,#98+256*0
	ld	a,15
setupsprites4	out	(c),a
	djnz	setupsprites4
setupsprites5	out	(c),a
	djnz	setupsprites5
	ret
spritesdb:
	db	112, 136, 152, 168, 200, 136, 112, 0	; 0
	db	32, 96, 160, 32, 32, 32, 248, 0	; 1
	db	112, 136, 8, 16, 96, 128, 248, 0	; 2
	db	112, 136, 8, 48, 8, 136, 112, 0	; 3
	db	16, 48, 80, 144, 248, 16, 16, 0	; 4
	db	248, 128, 224, 16, 8, 16, 224, 0	; 5
	db	48, 64, 128, 240, 136, 136, 112, 0	; 6
	db	248, 136, 16, 32, 32, 32, 32, 0	; 7
	db	112, 136, 136, 112, 136, 136, 112, 0	; 8
	db	112, 136, 136, 120, 8, 16, 96, 0	; 9
	db	0, 0, 32, 0, 0, 32, 0, 0		; :

	db	136, 136, 136, 112, 32, 32, 32, 0	; Y
	db	112, 136, 136, 136, 136, 136, 112, 0	; O
	db	136, 136, 136, 136, 136, 136, 112, 0	; U
	db	136, 136, 136, 168, 168, 216, 136, 0	; W
	db	112, 32, 32, 32, 32, 32, 112, 0	; I
	db	136, 200, 200, 168, 152, 152, 136, 0	; N
	db	128, 128, 128, 128, 128, 128, 248, 0	; L
	db	112, 136, 128, 112, 8, 136, 112, 0	; S
	db	248, 128, 128, 240, 128, 128, 248, 0	; E

spritey	equ	3
spritex	equ	8
spritesdb2:
	db	spritey,spritex,0,0
	db	spritey,spritex+8,0,0
	db	spritey,spritex+16,10,0
	db	spritey,spritex+24,1,0
	db	spritey,spritex+32,2,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0
	db	213,0,0,0

screen8clear	; VDP command 
		dw 0,0*256	; SX,SY
		dw 0,0+0*256	; DX,DY
		dw 256,512	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
screen8clearpage0		; VDP command 
		dw 0,0*256	; SX,SY
		dw 0,0+0*256	; DX,DY
		dw 256,212	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
screen8clearpage1		; VDP command 
		dw 0,0*256	; SX,SY
		dw 0,0+1*256	; DX,DY
		dw 256,212	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
screen8baldraw1	; VDP command 
		dw 0,0*256	; SX,SY
		dw 0,213+0*256	; DX,DY
		dw 4,2	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
screen8baldraw2	; VDP command 
		dw 0,0*256	; SX,SY
		dw 0,212+0*256	; DX,DY
		dw 2,4	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
screen8cursordraw	; VDP command 
		dw 0,0*256	; SX,SY
		dw 0,212+8+0*256	; DX,DY
		dw 6,6	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
screen8cursordraw2	; VDP command 
		dw 0,0*256	; SX,SY
		dw 1,213+8+0*256	; DX,DY
		dw 4,4	; NX,NY
		db 0,0		; color,argument
		db %11000000	; HMMV-command
			;
colorcodes	; de colors used by the bals, 64 colors in total possible 
	db %00000010,%00001000
	db %00001010,%00010000
	db %00010010,%00011000
	db %00011010,%00100000
	db %00100010,%00101000
	db %00101010,%00110000
	db %00110010,%00111000
	db %00111010,%01000000
	db %01000010,%01001000
	db %01001010,%01010000
	db %01010010,%01011000
	db %01011010,%01100000
	db %01100010,%01101000
	db %01101010,%01110000
	db %01110010,%01111000
	db %01111010,%10000000
	db %10000010,%10001000
	db %10001010,%10010000
	db %10010010,%10011000
	db %10011010,%10100000
	db %10100010,%10101000
	db %10101010,%10110000
	db %10110010,%10111000
	db %10111010,%11000000
	db %11000010,%11001000
	db %11001010,%11010000
	db %11010010,%11011000
	db %11011010,%11100000
	db %11100010,%11101000
	db %11101010,%11110000
	db %11110010,%11111000
	db %11111010,%11111110
	;
copyp1top3	; VDP command 
	dw 0,1*256	; SX,SY
	dw 0,3*256	; DX,DY
	dw 0,212	; NX,NY
	db 0,0	; color,argument
	db %11100000	; YMMM-command
		;
copyp1top2	; VDP command 
	dw 0,1*256	; SX,SY
	dw 0,2*256	; DX,DY
	dw 0,212	; NX,NY
	db 0,0	; color,argument
	db %11100000	; YMMM-command
			;
copyp2top3	; VDP command 
	dw 0,2*256	; SX,SY
	dw 0,3*256	; DX,DY
	dw 0,212	; NX,NY
	db 0,0	; color,argument
	db %11100000	; YMMM-command
			;
copypressanykey	; vdp command 
	dw 120,12+0*256+23	; sx,sy
	dw 102-60,60	; dx,dy
	dw 255-120,24	; nx,ny
	db 0,8	; color,argument
	db %10011000	; lmmm-command with timp
			;
niceworkclearmask	; vdp command 
	dw 120,60	; sx,sy
	dw 120,60	; dx,dy
	dw 255-120,6	; nx,ny
	db 0,0		; color,argument
	db %11000000	; hmmv-command
			;
prepareniceworkmask		; vdp command 
	dw 120,60	; sx,sy
	dw 120,60+5	; dx,dy
	dw 255-120,24	; nx,ny
	db 0,0		; color,argument
	db %11100000	; ymmm-command
			;
copyniceworkmask		; vdp command 
	dw 120,12+24	; sx,sy
	dw 120,60+5	; dx,dy
	dw 255-120,24	; nx,ny
	db 0,0		; color,argument
	db %10010001	; lmmm-command with and
			;
copynicework	; vdp command 
	dw 120,65+0*256	; sx,sy
	dw 60,60	; dx,dy
	dw 255-120,24	; nx,ny
	db 0,0		; color,argument
	db %10011000	; lmmm-command with timp
			;
clearlistpointer	dw clearlist1	; set of y,x and width,height side length
clearlistpntrnext	dw clearlist1
cursorx	db	0
cursory	db	0
cursorstate	db	0
ballsingame	db	0
ballsneeded	db	0
bgcolor	db	0
gamestate	db	0	; 2=start user hasn''t placed ball, 1 ball placed waiting until all shrinked, 0 all shrinked
ballsinflated	db	0	; count the number of 'big bals' the ones growing,counting or shrinking
hitcounter	db	0
ballinfo	db	0	; ix+ 0: state 0=not active, 1=moving, 2=growing, 3=countdown,4=shrinking,5=cleanup shrinking
	db	0	; ix+ 1: color of ball ball(=x-coordinate for copy in state 1)
	dw	0	; ix+ 2: X-speed
	dw	0	; ix+ 4: X
	dw	0	; ix+ 6: Y-speed
	dw	0	; ix+ 8: Y
	db	0	; ix+10: radius
	dw	0	; ix+11: countdowntimer for state 3
	db	0	; ix+13: reserved empty bytes for 16byte alignment
	db	0	; ix+14: reserved empty bytes for 16byte alignment
	db	0	; ix+15: reserved empty bytes for 16byte alignment

	ds	MAXBALS*16-16
ballinfoend	equ	$
clearlist1	ds	MAXBALS*4+4	; buffer for extra y=255 end-of-list-marker
clearlist2	ds	MAXBALS*4+4	; buffer for extra y=255 end-of-list-marker
redrawlist	ds	MAXBALS+2	; 225 end-of-list-marker, otherwise number of ball for which circle to draw
clearlistend	equ	$
redrawlistpntrnext	dw redrawlist
	ds	((($/256)+1)*256)-$

sintab:	;  perl -e 'for $i (0..255){ print " db ".int(-0.01+128*sin($i*8*atan2(1,1)/256))."\n";}'
	db 0,3,6,9,12,15,18,21
	db 24,28,31,34,37,40,43,46
	db 48,51,54,57,60,63,65,68
	db 71,73,76,78,81,83,85,88
	db 90,92,94,96,98,100,102,104
	db 106,108,109,111,112,114,115,117
	db 118,119,120,121,122,123,124,124
	db 125,126,126,127,127,127,127,127
	db 127,127,127,127,127,127,126,126
	db 125,124,124,123,122,121,120,119
	db 118,117,115,114,112,111,109,108
	db 106,104,102,100,98,96,94,92
	db 90,88,85,83,81,78,76,73
	db 71,68,65,63,60,57,54,51
	db 48,46,43,40,37,34,31,28
	db 24,21,18,15,12,9,6,3
	db 0,-3,-6,-9,-12,-15,-18,-21
	db -24,-28,-31,-34,-37,-40,-43,-46
	db -48,-51,-54,-57,-60,-63,-65,-68
	db -71,-73,-76,-78,-81,-83,-85,-88
	db -90,-92,-94,-96,-98,-100,-102,-104
	db -106,-108,-109,-111,-112,-114,-115,-117
	db -118,-119,-120,-121,-122,-123,-124,-124
	db -125,-126,-126,-127,-127,-127,-127,-127
	db -128,-127,-127,-127,-127,-127,-126,-126
	db -125,-124,-124,-123,-122,-121,-120,-119
	db -118,-117,-115,-114,-112,-111,-109,-108
	db -106,-104,-102,-100,-98,-96,-94,-92
	db -90,-88,-85,-83,-81,-78,-76,-73
	db -71,-68,-65,-63,-60,-57,-54,-51
	db -48,-46,-43,-40,-37,-34,-31,-28
	db -24,-21,-18,-15,-12,-9,-6,-3
einde	equ	$
bytemap	ds	64*64

